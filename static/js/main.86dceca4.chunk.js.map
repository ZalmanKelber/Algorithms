{"version":3,"sources":["reducers/initialState.js","actions/types.js","reducers/index.js","components/LinkDisplay.js","components/Home.js","actions/index.js","utils/miscellaneous/generateColors.js","utils/changeStore/editInput.js","utils/changeStore/initializeSort.js","utils/changeStore/onKosarajuPhaseChange.js","utils/changeStore/changeBasicInfo.js","utils/changeStore/initializeHeapProgressData.js","inputs/kruskalInputSmall.js","inputs/kruskalInputLarge.js","inputs/kosarajuInputSmall.js","inputs/kosarajuInputLarge.js","utils/dataClasses/TreeNode.js","utils/treeFunctions/unfindTreeData.js","utils/treeFunctions/appendNodeToHeap.js","utils/changeStore/changeHuffmanDataOnInputChange.js","utils/changeStore/changeInput.js","components/Header.js","utils/changeStore/changeFormInput.js","components/KruskalForm.js","components/ButtonsKruskal1.js","utils/changeStore/addEdgeToSort.js","components/ButtonsKruskal2.js","utils/changeStore/nextMergeSortStep.js","components/ButtonsKruskal3.js","utils/changeStore/nextQuickSortStep.js","utils/changeStore/nextBubbleSortStep.js","utils/changeStore/nextSelectionSortStep.js","components/ButtonsKruskal4.js","utils/changeStore/nextUnionFindStep.js","utils/changeStore/nextSearchCyclesStep.js","components/ButtonsKruskal5.js","components/KosarajuForm.js","components/ButtonsKosaraju1.js","components/ButtonsKosaraju2.js","utils/changeStore/nextDepthFirstSearchStep.js","utils/miscellaneous/nextUnfoundVertexIndex.js","components/ButtonsKosaraju3.js","components/ButtonsKosaraju4.js","utils/changeStore/nextKosarajuStep.js","utils/miscellaneous/nextUnfoundVertexIndexOrdered.js","components/ButtonsKosaraju5.js","components/ButtonsHuffman1.js","utils/treeFunctions/findObjInTreeByChars.js","utils/changeStore/nextHeapifyStep.js","components/ButtonsHuffman2.js","utils/treeFunctions/findParentOf.js","utils/changeStore/nextHuffmanStep.js","components/ButtonsHuffman3.js","components/ButtonsCompleted.js","components/UserInput.js","utils/dataClasses/SketchVertex.js","sketches/kruskalGraphSketch.js","utils/sketchFunctions/drawEdgesKruskalGraph.js","utils/sketchFunctions/drawVerticesKruskal.js","components/KruskalGraphHandler.js","sketches/kruskalSortSketch.js","utils/sketchFunctions/drawEdgesKruskalSort.js","components/KruskalSortHandler.js","components/Kruskal.js","sketches/kosarajuIndexSketch.js","utils/sketchFunctions/drawVerticesKosarajuIndex.js","components/KosarajuIndexHandler.js","utils/sketchFunctions/drawEdgesKosaraju.js","sketches/kosarajuGraphSketch.js","utils/sketchFunctions/drawVerticesKosarajuGraph.js","components/KosarajuGraphHandler.js","components/Kosaraju.js","components/HuffmanChartHandler.js","utils/sketchFunctions/drawCirclesHuffman.js","utils/sketchFunctions/drawTree.js","sketches/huffmanEncodingTreeSketch.js","components/HuffmanEncodingTreeHandler.js","sketches/huffmanHeapSketch.js","components/HuffmanHeapHandler.js","components/Huffman.js","components/About.js","components/App.js","index.js"],"names":["initialState","selectedAlgorithm","type","sortMethod","cycleSearchMethod","phase","input","editGraph","dragVertex","addVertex","deleteVertex","deleteEdge","formInput","kruskal","vertex1","vertex2","cost","kosaraju","startVertex","endVertex","data","edges","vertices","vertexIndex","huffman","frequencies","encodingTree","heapTree","chart","algorithmProgress","addEdges","count","mergeSort","partitions","currentPartition","currentSection","loopIndex","numInvisible","quickSort","unsortedRanges","pivotIndex","swapIndex","bubbleSort","iIndex","jIndex","selectionSort","minIndex","searchCycles","testing","vertexCache","edgeCache","vertexStack","edgesChecked","edgesAdded","unionFind","depthFirstSearch","algorithm","heapify","heapStack","nodeToBubble","extractedMins","nodeToRemove","nodeToInsert","RESET","combineReducers","state","action","payload","console","log","LinkDisplay","props","className","style","opacity","name","Home","opacityLevels","title","componentDidMount","fadeInElements","setTimeout","fadeInOneElement","FADE_TIME","element","handler","setInterval","newOpacity","setState","clearInterval","this","to","React","Component","updateSelectedAlgorithm","updatePhase","updateEditGraph","updateData","updateAlgorithmProgress","generateColors","num","rUnits","Math","ceil","cbrt","gUnits","sqrt","bUnits","colorsArray","i","j","k","push","round","length","prevArray","remainder","newArray","floor","reduceArray","changeEditGraph","editType","store","dispatch","x","y","getState","forEach","vertex","index","displayColor","deleteEdgeHandler","cache","prop1","prop2","filter","edge","addEdge","v1","v2","newEdge","Number","displayGraph","start","end","newData","changeVertex","initializeSort","newAlgorithmProgress","partitionsArray","nextPartition","value","max","generatePartitions","sortDisplayColor","unfindKosarajuData","found","findScc","localStack","scc","nextEdges","inEdges","pop","changeSelectedAlgorithmType","changeSelectedAlgorithmSortMethod","changeSelectedAlgorithmCycleSearchMethod","callReset","changePhase","newPhase","currentPhase","initializeHeapProgressData","outEdges","addInAndOutEdges","stronglyConnectedComponents","color","assignKosarajuColors","leader","followers","kruskalInputSmall","kruskalInputLarge","kosarajuInputSmall","kosarajuInputLarge","TreeNode","chars","freq","assignChild","childNode","currentChildren","children","localWidthIndex","depthIndex","parent","copy","copyNode","child","newChild","unfindTreeData","treeData","removeSelected","Object","keys","stack","stackObj","visited","searched","selected","undefined","appendNodeToHeap","maxDepth","inserted","searchPhase","queue","queueObj","shift","changeHuffmanDataOnInputChange","newInput","hashSet","alpha","node","getNewFrequencies","newNode","getNewHeapTreeFromFrequencies","getNewEncodingTree","getNewChart","tree","nextTreeStep","branch","newNode1","newNode2","getChartObj","every","bitCodeArray","pointer","char","code","reverse","join","changeInput","inputString","changeKruskalDataOnInputChange","foundAgain","added","changeKosarajuDataOnInputChange","toUpperCase","split","map","test","updateInput","Header","onClick","window","location","reload","changeFormInput","updateFormInput","connect","form","totalVertices","updateForm","e","target","ReactDOM","createPortal","hideForm","stopPropagation","onChange","autoComplete","document","querySelector","useState","displayForm","setDisplayForm","progressPayload","dataPayload","displaySort","addEdgeToSort","renderText","nextMergeSortStep","newEdges","sectionLength","newSection","edgesInSection","edgesInput","sorted","nextEdge","sortEdges","numberOfEdges","nextStep","newUnsortedRanges","nextQuickSortStep","numEdges","newDataPayload","newJIndex","nextDisplayColor","nextBubbleSortStep","nextSelectionSortStep","nextUnionFindStep","edgeToTest","flash","newLeader","newFollower","follower","newestData","nextSearchCyclesStep","findEdgesKruskal","nextVertex","KosarajuForm","ButtonsKosaraju2","nextDepthFirstSearchStep","newVertexStack","nextUnfoundVertexIndex","ButtonsKosaraju3","ButtonsKosaraju4","nextKosarajuStep","nextUnfoundVertexIndexOrdered","ButtonsKosaraju5","findObjInTreeByChars","nextHeapifyStep","newHeapTree","bubbleObj","heapified","pushIndex","ButtonsHuffman2","nextHuffmanStep","findParentOf","newChild1","newChild2","freqObj","newChars","newFreq","newTreeObj","newHeapObj","ButtonsHuffman3","ButtonsCompleted","renderButtons","SketchVertex","renderCircle","p","diam","borderColor","fillColor","textSize","fill","stroke","strokeWeight","circle","noStroke","textAlign","CENTER","text","sendData","dist","mouseX","mouseY","width","height","kruskalGraphSketch","draw","responsiveVertices","selectedIndex","myCustomRedrawAccordingToNewPropsHandler","newProps","showColor","newResponsiveVertex","getResponsiveVertices","setup","createCanvas","background","lineLength","pow","line","drawEdges","responsiveVertex","drawVertices","mousePressed","vertexData","mouseClicked","mouseDragged","mouseReleased","KruskalGraphHandler","sketch","graphSketch","unitHeight","MARGIN","unitWidth","rect","BAR_WIDTH","KruskalSortHandler","kruskalSortSketch","Kruskal","display","justifyContent","kosarajuGraphSketch","getResponsiveVerticesKosarajuIndex","defaultColor","KosarajuIndexHandler","kosarajuIndexSketch","renderArrowHead","lineCoords","xStart","yStart","xEnd","yEnd","theta","atan","handleNegative","x1","cos","y1","sin","x2","PI","y2","x3","y3","beginShape","endShape","CLOSE","getResponsiveVerticesKosaraju","KosarajuGraphHandler","Kosaraju","backgroundColor","margin","HuffmanChartHandler","totalBits","componentDidUpdate","newTotalBits","row","class","drawCircles","treeInfo","drawOneCircle","childObj","coords","totalLeaves","textX","textY","BIT_TEXT","drawLine","colorValue","maxFrequency","xCoord","yCoord","LEFT","replace","DIAM","drawTree","freq1","freq2","assignCoordinatesAndFrequencies","huffmanEncodingTreeSketch","HuffmanEncodingTreeHandler","huffmanHeapSketch","heap","HuffmanHeapHandler","Huffman","About","selectedAlgorithmType","App","path","exact","component","createStore","reducers","render"],"mappings":"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IAAK,IAChB,CAACD,MAAO,EAAGC,IAAK,IAChB,CAACD,MAAO,GAAIC,IAAK,IACjB,CAACD,MAAO,GAAIC,IAAK,IACjB,CAACD,MAAO,GAAIC,IAAK,IACjB,CAACD,MAAO,GAAIC,IAAK,IACjB,CAACD,MAAO,GAAIC,IAAK,GACjB,CAACD,MAAO,GAAIC,IAAK,IACjB,CAACD,MAAO,GAAIC,IAAK,GACjB,CAACD,MAAO,GAAIC,IAAK,GACjB,CAACD,MAAO,EAAGC,IAAK,IAChB,CAACD,MAAO,GAAIC,IAAK,IACjB,CAACD,MAAO,GAAIC,IAAK,IACjB,CAACD,MAAO,GAAIC,IAAK,GACjB,CAACD,MAAO,GAAIC,IAAK,IACjB,CAACD,MAAO,GAAIC,IAAK,IACjB,CAACD,MAAO,GAAIC,IAAK,IACjB,CAACD,MAAO,GAAIC,IAAK,IACjB,CAACD,MAAO,EAAGC,IAAK,IAChB,CAACD,MAAO,EAAGC,IAAK,IAChB,CAACD,MAAO,GAAIC,IAAK,IACjB,CAACD,MAAO,GAAIC,IAAK,IACjB,CAACD,MAAO,EAAGC,IAAK,IAChB,CAACD,MAAO,GAAIC,IAAK,GACjB,CAACD,MAAO,GAAIC,IAAK,IACjB,CAACD,MAAO,GAAIC,IAAK,IACjB,CAACD,MAAO,EAAGC,IAAK,IAChB,CAACD,MAAO,GAAIC,IAAK,IACjB,CAACD,MAAO,GAAIC,IAAK,IACjB,CAACD,MAAO,GAAIC,IAAK,IACjB,CAACD,MAAO,GAAIC,IAAK,IACjB,CAACD,MAAO,EAAGC,IAAK,IAChB,CAACD,MAAO,EAAGC,IAAK,GAChB,CAACD,MAAO,GAAIC,IAAK,GACjB,CAACD,MAAO,EAAGC,IAAK,GAChB,CAACD,MAAO,GAAIC,IAAK,IACjB,CAACD,MAAO,EAAGC,IAAK,IAChB,CAACD,MAAO,GAAIC,IAAK,IACjB,CAACD,MAAO,EAAGC,IAAK,IAChB,CAACD,MAAO,EAAGC,IAAK,IAChB,CAACD,MAAO,EAAGC,IAAK,IAChB,CAACD,MAAO,GAAIC,IAAK,IACjB,CAACD,MAAO,GAAIC,IAAK,IACjB,CAACD,MAAO,GA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","file":"static/js/main.86dceca4.chunk.js","sourcesContent":["export const initialState = {\n    selectedAlgorithm: {\n        type: null, //kruskal, kosaraju, huffman\n        sortMethod: \"merge\", //bubble, quick, selection\n        cycleSearchMethod: \"unionFind\" //depthFirstSearch\n    },\n\n    phase: \"notStarted\", //addingEdges, choosingSort, sorting, choosingCycleSearchMethod, solving, completed\n                                //readyToReverse, depthFirstSearch, readyToUnreverse, solving, completed\n                                //heapifying, solving, completed\n\n    input: null,\n\n    editGraph: {\n        dragVertex: true,\n        addVertex: false,\n        deleteVertex: false,\n        deleteEdge: false\n    },\n\n    formInput: {\n        kruskal: {\n            vertex1: \"\",\n            vertex2: \"\",\n            cost: \"\"\n        },\n        kosaraju: {\n            startVertex: \"\",\n            endVertex: \"\"\n        },\n    },\n\n    data: {\n        kruskal: {\n            edges: [],\n            vertices: [],\n            input: \"\"\n        },\n        kosaraju: {\n            edges: [],\n            vertices: [],\n            vertexIndex: [],\n            input: \"\"\n        },\n        huffman: {\n            frequencies: [],\n            encodingTree: null,\n            heapTree: null,\n            chart: [],\n            input: \"\"\n        }\n    },\n\n    algorithmProgress: {\n        kruskal: {\n            addEdges: {\n                count: 0\n            },\n            mergeSort: {\n                partitions: [],\n                currentPartition: 0,\n                currentSection: 0,\n                loopIndex: 0,\n                numInvisible: 0\n            },\n            quickSort: {\n                unsortedRanges: [],\n                pivotIndex: 0,\n                swapIndex: 0\n            },\n            bubbleSort: {\n                iIndex: 0,\n                jIndex: 0\n            },\n            selectionSort: {\n                iIndex: 0,\n                jIndex: 0,\n                minIndex: 0\n            },\n            searchCycles: {\n                testing: false,\n                vertexCache: {},\n                edgeCache: {},\n                vertexStack: [],\n                edgesChecked: 0,\n                edgesAdded: 0\n            },\n            unionFind: {\n                edgesChecked: 0,\n                edgesAdded: 0,\n            }\n        },\n        kosaraju: {\n            depthFirstSearch: {\n                vertexStack: []\n            },\n            algorithm: {\n                vertexStack: []\n            }\n        },\n        huffman: {\n            heapify: {\n                heapStack: [],\n                nodeToBubble: null\n            },\n            algorithm: {\n                extractedMins: [],\n                nodeToRemove: null,\n                nodeToInsert: null\n            }\n        }\n    }\n}","export const UPDATE_PHASE = \"UPDATE_PHASE\";\nexport const UPDATE_EDIT_GRAPH = \"UPDATE_EDIT_GRAPH\";\nexport const UPDATE_INPUT = \"UPDATE_INPUT\";\nexport const UPDATE_DATA = \"UPDATE_DATA\";\nexport const UPDATE_ALGORITHM_PROGRESS = \"UPDATE_ALGORITHM_PROGRESS\";\nexport const UPDATE_FORM_INPUT = \"UPDATE_FORM_INPUT\";\nexport const UPDATE_SELECTED_ALGORITHM = \"UPDATE_SELECTED_ALGORITHM\";\nexport const RESET = \"RESET\";","import { combineReducers } from \"redux\";\nimport { initialState } from \"./initialState\";\nimport {\n    UPDATE_SELECTED_ALGORITHM,\n    UPDATE_PHASE,\n    UPDATE_INPUT,\n    UPDATE_EDIT_GRAPH,\n    UPDATE_FORM_INPUT,\n    UPDATE_DATA,\n    UPDATE_ALGORITHM_PROGRESS,\n    RESET\n} from \"../actions/types\";\n\n//note that the logic of updating state is not written in either the action creator or reducer\n//functions but rather separate functions that can be exported and called without having to access\n//the redux score or connect component directly\n\nconst selectedAlgorithmReducer = (state={ ...initialState.selectedAlgorithm }, action) => {\n    if (action.type === UPDATE_SELECTED_ALGORITHM) {\n        return action.payload;\n    }\n    if (action.type === RESET) {\n        return action.payload.selectedAlgorithm;\n    }\n    return state;\n}\nconst phaseReducer = (state=initialState.phase, action) => {\n    if (action.type === UPDATE_PHASE) {\n        return action.payload;\n    }\n    if (action.type === RESET) {\n        return action.payload.phase;\n    }\n    return state;\n}\nconst inputReducer = (state={ ...initialState.input}, action) => {\n    if (action.type === UPDATE_INPUT) {\n        return action.payload;\n    }\n    if (action.type === RESET) {\n        return action.payload.input;\n    }\n    return state;\n}\nconst editGraphReducer = (state={ ...initialState.editGraph}, action) => {\n    if (action.type === UPDATE_EDIT_GRAPH) {\n        return action.payload;\n    }\n    if (action.type === RESET) {\n        return action.payload.editGraph;\n    }\n    return state;\n}\nconst formInputReducer = (state={ ...initialState.formInput}, action) => {\n    if (action.type === UPDATE_FORM_INPUT) {\n        return action.payload;\n    }\n    if (action.type === RESET) {\n        return action.payload.formInput;\n    }\n    return state;\n}\nconst dataReducer = (state={ ...initialState.data}, action) => {\n    if (action.type === UPDATE_DATA) {\n        return action.payload;\n    }\n    if (action.type === RESET) {\n        return action.payload.data;\n    }\n    return state;\n}\nconst algorithmProgressReducer = (state={ ...initialState.algorithmProgress}, action) => {\n    if (action.type === UPDATE_ALGORITHM_PROGRESS) {\n        return action.payload;\n    }\n    if (action.type === RESET) {\n        console.log(\"returning kruskal algorithm progress:\", initialState.algorithmProgress.kruskal);\n        return action.payload.algorithmProgress;\n    }\n    return state;\n}\n\nexport default combineReducers({\n    selectedAlgorithm: selectedAlgorithmReducer,\n    phase: phaseReducer,\n    input: inputReducer,\n    editGraph: editGraphReducer,\n    formInput: formInputReducer,\n    data: dataReducer,\n    algorithmProgress: algorithmProgressReducer\n});\n","import React from \"react\";\n\nconst LinkDisplay = props => {\n    return (\n        <div className=\"link-display-wrapper\">\n            <div className=\"link-display\" style={{opacity: props.opacity}}>\n                <h3>{props.name}</h3>\n            </div>\n        </div>\n    );\n}\n\nexport default LinkDisplay;","import React from \"react\";\nimport \"./Home.css\";\nimport { Link } from \"react-router-dom\";\n\nimport LinkDisplay from \"./LinkDisplay\";\n\nconst FADE_TIME = 3000;\n\nclass Home extends React.Component {\n\n    //opacity levels in state changed by fade-in functions called by componentDidMount\n    state = {\n        opacityLevels: {\n            title: 0,\n            kruskal: 0,\n            kosaraju: 0,\n            huffman: 0\n        }\n    };\n\n    componentDidMount = () => {\n        console.log(\"componentDidMount in Home.js called\")\n        this.fadeInElements();\n    }\n\n    //title and links fade in when users access page\n    fadeInElements = () => {\n        setTimeout(() => this.fadeInOneElement(\"title\"), FADE_TIME * 0.25);\n        setTimeout(() => this.fadeInOneElement(\"kruskal\"), FADE_TIME * 0.75);\n        setTimeout(() => this.fadeInOneElement(\"kosaraju\"), FADE_TIME * 1.25);\n        setTimeout(() => this.fadeInOneElement(\"huffman\"), FADE_TIME * 1.75);\n    }\n\n    fadeInOneElement = element => {\n        let count = 0;\n        const INTERVAL_TIME = 10;\n        const handler = setInterval(() => {\n            count++;\n            const newOpacity = count * INTERVAL_TIME / FADE_TIME;\n            this.setState({\n                opacityLevels: {\n                    ...this.state.opacityLevels,\n                    [element]: newOpacity\n                }\n            });\n            if (count >= FADE_TIME / INTERVAL_TIME) {\n                clearInterval(handler);\n            }\n        }, INTERVAL_TIME);\n    }\n\n    render() {\n        return (\n            <div className=\"home\">\n                <div className=\"title\" style={{opacity: this.state.opacityLevels.title}}>\n                    <h4>A L G O R I T H M S</h4>\n                </div>\n                <div className=\"links\">\n                    <Link to=\"/kruskal\">\n                        <LinkDisplay name=\"KRUSKAL\" opacity={this.state.opacityLevels.kruskal} />\n                    </Link>\n                    <Link to=\"/kosaraju\">\n                        <LinkDisplay name=\"KOSARAJU - SHAHRIR\" opacity={this.state.opacityLevels.kosaraju} />\n                    </Link>\n                    <Link to=\"/huffman\">\n                        <LinkDisplay name=\"HUFFMAN\" opacity={this.state.opacityLevels.huffman} />\n                    </Link>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Home;","import {\n    UPDATE_SELECTED_ALGORITHM,\n    UPDATE_PHASE,\n    UPDATE_INPUT,\n    UPDATE_EDIT_GRAPH,\n    UPDATE_FORM_INPUT,\n    UPDATE_DATA,\n    UPDATE_ALGORITHM_PROGRESS,\n    RESET\n} from \"./types\";\nimport { initialState } from \"../reducers/initialState\";\n\n//note that the logic of updating state is not written in either the action creator or reducer\n//functions but rather separate functions that can be exported and called without having to access\n//the redux score or connect component directly\n\nexport const updateSelectedAlgorithm = payload => {\n    return {\n        type: UPDATE_SELECTED_ALGORITHM,\n        payload\n    }\n}\n\nexport const updatePhase = payload => {\n    return {\n        type: UPDATE_PHASE,\n        payload\n    }\n}\n\nexport const updateInput = payload => {\n    return {\n        type: UPDATE_INPUT,\n        payload\n    }\n}\n\nexport const updateEditGraph = payload => {\n    return {\n        type: UPDATE_EDIT_GRAPH,\n        payload\n    }\n}\n\nexport const updateFormInput = payload => {\n    return {\n        type: UPDATE_FORM_INPUT,\n        payload\n    }\n}\n\nexport const updateData = payload => {\n    return {\n        type: UPDATE_DATA,\n        payload\n    }\n}\n\nexport const updateAlgorithmProgress = payload => {\n    return {\n        type: UPDATE_ALGORITHM_PROGRESS,\n        payload\n    }\n}\n\nexport const reset = () => {\n    return {\n        type: RESET,\n        payload: initialState\n    }\n}\n","//approximates the cube root of the number and uses it to find a list of colors of maximum distance on the rgb cube\nexport default function generateColors(num) {\n    const rUnits = Math.ceil(Math.cbrt(num));\n    const gUnits = Math.ceil(Math.sqrt(num/rUnits));\n    const bUnits = Math.ceil((num/rUnits) / gUnits);\n\n    const colorsArray = [];\n    for (let i = 0; i < rUnits; i++) {\n        for (let j = 0; j < gUnits; j++) {\n            for (let k = 0; k < bUnits; k++) {\n                    colorsArray.push([Math.round(256 * i / rUnits), Math.round(256 * j / gUnits), Math.round(256 * k / bUnits)]);\n            }\n        }\n    }\n    if (num === colorsArray.length) {\n        return colorsArray;\n    }\n    else {\n        return reduceArray(colorsArray, num);\n    }\n}\n\nfunction reduceArray(prevArray, num) {\n    const remainder = prevArray.length - num;\n    const newArray = [];\n    for (let i = 0; i < prevArray.length; i++) {\n        if (i % (Math.floor(prevArray.length / remainder)) !== 0 || i >= (Math.floor(prevArray.length / remainder) * remainder)) {\n            newArray.push(prevArray[i]);\n        }\n    }\n    return newArray;\n}","import { store } from \"../../index.js\";\nimport {\n    updateEditGraph,\n    updateData\n    } from \"../../actions\";\nimport generateColors from \"../miscellaneous/generateColors\";\n\n//changes which properties of the graph are editable\nexport function changeEditGraph(editType=null) {\n    const payload = {\n        dragVertex: false,\n        addVertex: false,\n        deleteVertex: false,\n        deleteEdge: false\n    }\n    if (editType) {\n        payload[editType] = true;\n    }\n    store.dispatch(updateEditGraph(payload));\n}\n\n//adds a vertex to kosaraju or kruskal graphs with specified coordinates\nexport function addVertex(x, y) {\n    const payload = { ...store.getState().data }\n    const { type } = store.getState().selectedAlgorithm;\n    payload[type].vertices.push({x, y});\n    if (type === \"kruskal\") {\n        const colorsArray = generateColors(payload[type].vertices.length);\n        payload[type].vertices.forEach((vertex, index) => vertex.displayColor = colorsArray[index]);\n    }\n    store.dispatch(updateData(payload));\n}\n\n//returns a function that is called when a vertex is clicked.  \n//when the cache contains an index, any edge connecting both vertices is removed\nexport function deleteEdgeHandler() {\n    let cache = null;\n    return index => {\n        if (!cache) {\n            cache = index;\n        }\n        else {\n            const payload = { ...store.getState().data }\n            const { type } = store.getState().selectedAlgorithm;\n            const prop1 = type === \"kruskal\" ? \"vertex1\" : \"start\";\n            const prop2 = type === \"kruskal\" ? \"vertex2\" : \"end\";\n            payload[type].edges = payload[type].edges.filter(edge => {\n                return !((edge[prop1] === index || edge[prop1] === cache) && (edge[prop2] === index || edge[prop2] === cache));\n            });\n            cache = null;\n            store.dispatch(updateData(payload));\n        }\n    }\n}\n\nexport function addEdge(v1, v2, cost) {\n    const payload = { ...store.getState().data }\n    const { type } = store.getState().selectedAlgorithm;\n    const newEdge = type === \"kruskal\" ? {vertex1: Number(v1), vertex2: Number(v2), cost: Number(cost), displayGraph: true} \n        : {start: Number(v1), end: Number(v2)};\n    payload[type].edges.push(newEdge);\n    store.dispatch(updateData(payload));\n}\n\n//deletes vertex, removes edges reaching vertex and reassigns indices of higher-index vertices and the \n//edges that connect them\nexport function deleteVertex(index) {\n    let payload = { ...store.getState().data }\n    const { type } = store.getState().selectedAlgorithm;\n    let newData = type === \"kruskal\" ? payload.kruskal : payload.kosaraju;\n    newData.vertices = newData.vertices.filter((vertex, i) => i !== index);\n    if (type === \"kruskal\") {\n        newData.edges = newData.edges.filter(edge => edge.vertex1 !== index && edge.vertex2 !== index);\n        newData.edges.forEach(edge => {\n            edge.vertex1 = edge.vertex1 > index ? edge.vertex1 - 1 : edge.vertex1;\n            edge.vertex2 = edge.vertex2 > index ? edge.vertex2 - 1 : edge.vertex2;\n        });\n        const colorsArray = generateColors(newData.vertices.length);\n        newData.vertices.forEach((vertex, index) => vertex.displayColor = colorsArray[index]);\n        payload.kruskal = newData;\n    }\n    else {\n        newData.edges = newData.edges.filter(edge => edge.start !== index && edge.end !== index);\n        newData.edges.forEach(edge => {\n            edge.start = edge.start > index ? edge.start - 1 : edge.start;\n            edge.end = edge.end > index ? edge.end - 1 : edge.end;\n        });\n        payload.kruskal = newData;\n    }\n    store.dispatch(updateData(payload));\n}\n\n//changes coordinates of vertex in response to mouse drag\nexport function changeVertex(index, x, y) {\n    const payload = { ...store.getState().data }\n    const { type } = store.getState().selectedAlgorithm;\n    if (type === \"kruskal\") {\n        payload.kruskal.vertices[index].x = x;\n        payload.kruskal.vertices[index].y = y;\n    }\n    else {\n        payload.kosaraju.vertices[index].x = x;\n        payload.kosaraju.vertices[index].y = y;\n    }\n    store.dispatch(updateData(payload));\n}","import { store } from \"../../index.js\";\nimport {\n    updateData,\n    updateAlgorithmProgress\n    } from \"../../actions\";\n\n//generates partitions used in merge sort and initializes the unsortedRanges array used by quick sort\n//to contain the single range of the full list of edges\nexport default function initializeSort() {\n    const newData = { ...store.getState().data }\n    const newAlgorithmProgress = { ...store.getState().algorithmProgress}\n    switch (store.getState().selectedAlgorithm.sortMethod) {\n        case \"merge\":\n            newAlgorithmProgress.kruskal.mergeSort.partitions = generatePartitions(newData.kruskal.edges.length);\n            newAlgorithmProgress.kruskal.mergeSort.currentPartition = newAlgorithmProgress.kruskal.mergeSort.partitions.length - 1;\n            store.dispatch(updateAlgorithmProgress(newAlgorithmProgress));\n            return;\n        case \"quick\":\n            newAlgorithmProgress.kruskal.quickSort.unsortedRanges = [[0, newData.kruskal.edges.length - 1]];\n            newAlgorithmProgress.kruskal.quickSort.swapIndex = newData.kruskal.edges.length - 1;\n            newData.kruskal.edges.forEach(edge => edge.sortDisplayColor = \"cyan\");\n            newData.kruskal.edges[0].sortDisplayColor = \"blue\";\n            store.dispatch(updateAlgorithmProgress(newAlgorithmProgress));\n            store.dispatch(updateData(newData));\n            return;\n        default:\n            return;\n    }\n}\n\n//the partitions array shows the different sub-problems of the merge sort algorithm\nfunction generatePartitions(length) {\n    const partitionsArray = [[length]];\n    while (Math.max(...partitionsArray[partitionsArray.length - 1]) > 2) {\n        const nextPartition = [];\n        partitionsArray[partitionsArray.length - 1].forEach(value => {\n            nextPartition.push(Math.floor(value / 2));\n            nextPartition.push(Math.ceil(value / 2));\n        });\n        partitionsArray.push(nextPartition);\n    }\n    return partitionsArray;\n}","import { store } from \"../../index.js\";\nimport { updateData } from \"../../actions\";\nimport generateColors from \"../miscellaneous/generateColors\";\n\n//simply assigns incoming and outcoming edges of each vertex for convenience when running depth-first searched\nexport function addInAndOutEdges() {\n    const newData = { ...store.getState().data };\n    const { vertices, edges } = newData.kosaraju;\n    for (let i = 0; i < vertices.length; i++) {\n        const outEdges = [];\n        const inEdges = [];\n        edges.forEach(({start, end}, index) => {\n            if (start === i) {\n                inEdges.push(index);\n            }\n            if (end === i) {\n                outEdges.push(index);\n            }\n        });\n        newData.kosaraju.vertices[i].inEdges = inEdges;\n        newData.kosaraju.vertices[i].outEdges = outEdges;\n    }\n    store.dispatch(updateData(newData));\n}\n\nexport function unfindKosarajuData() {\n    const newData = { ...store.getState().data };\n    newData.kosaraju.vertices.forEach(vertex => vertex.found = false);\n    newData.kosaraju.edges.forEach(edge => edge.found = false);\n    store.dispatch(updateData(newData));\n}\n\n//computes the sccs in advance in order to determine the number of colors to generate\n//it then assigns all of the colors ahead of time according to the sccs\nexport function assignKosarajuColors() {\n    unfindKosarajuData();\n    const newData = { ...store.getState().data }\n    const { vertices, edges, vertexIndex } = newData.kosaraju;\n    const stronglyConnectedComponents = [];\n    for (let i = vertexIndex.length - 1; i>= 0; i--) {\n        if (!vertices[vertexIndex[i]].found) {\n            stronglyConnectedComponents.push(findScc(vertexIndex[i], vertices, edges));\n        }\n    }\n    const colorsArray = generateColors(stronglyConnectedComponents.length);\n    stronglyConnectedComponents.forEach((scc, index) => {\n        scc.forEach(vertex => {\n            const color = `rgb(${colorsArray[index][0]},${colorsArray[index][1]},${colorsArray[index][2]})`\n            newData.kosaraju.vertices[vertex].displayColor = color;\n        });\n    });\n    unfindKosarajuData();\n    store.dispatch(updateData(newData));\n}\n\n//runs a depth first search on a vertex to find all accessible in-neighbords\n//by running them in order of our vertexIndex at this stage, each search yields an scc\nfunction findScc(vertex, vertices, edges) {\n    vertices[vertex].found = true;\n    let localStack = [vertex];\n    let scc = [];\n    while (localStack.length > 0) {\n        const index = localStack[localStack.length - 1];\n        const nextEdges = vertices[index].inEdges.filter(edge => !edges[edge].found);\n        if (nextEdges.length === 0) {\n            scc.push(index);\n            localStack.pop();\n        }\n        else {\n            edges[nextEdges[0]].found = true;\n            if (!vertices[edges[nextEdges[0]].end].found) {\n                localStack.push(edges[nextEdges[0]].end);\n                vertices[edges[nextEdges[0]].end].found = true;\n            }\n        }\n    }\n    return scc;\n}\n","import { store } from \"../../index.js\";\nimport {\n    updateSelectedAlgorithm,\n    updatePhase,\n    reset,\n    updateAlgorithmProgress\n    } from \"../../actions\";\nimport { changeEditGraph } from \"./editInput\";\nimport initializeSort from \"./initializeSort\";\nimport initializeHeapProgressData from \"./initializeHeapProgressData\";\nimport { addInAndOutEdges, assignKosarajuColors } from \"./onKosarajuPhaseChange\";\n\nexport function changeSelectedAlgorithmType(type) {\n    const payload = { ...store.getState().selectedAlgorithm, type};\n    store.dispatch(updateSelectedAlgorithm(payload));\n}\n\nexport function changeSelectedAlgorithmSortMethod(sortMethod) {\n    const payload = { ...store.getState().selectedAlgorithm, sortMethod};\n    store.dispatch(updateSelectedAlgorithm(payload));\n}\nexport function changeSelectedAlgorithmCycleSearchMethod(cycleSearchMethod) {\n    const payload = { ...store.getState().selectedAlgorithm, cycleSearchMethod};\n    store.dispatch(updateSelectedAlgorithm(payload));\n}\n\nexport function callReset() {\n    store.dispatch(reset());\n}\n\n//changes phase and calls appropriate functions when other data needs to be updated as a result\nexport function changePhase(newPhase) {\n    const currentPhase = store.getState().phase;\n    console.log(currentPhase, newPhase);\n    if (currentPhase === \"notStarted\") {\n        changeEditGraph();\n    }\n    if (newPhase === \"sorting\") {\n        initializeSort();\n    }\n    if (newPhase === \"heapifying\") {\n        initializeHeapProgressData();\n    }\n    if (currentPhase === \"heapifying\" && newPhase === \"solving\") {\n        console.log(\"updating huffman info on algorithm change\")\n        const { heapTree } = store.getState().data.huffman;\n        const payload = { ...store.getState().algorithmProgress};\n        payload.huffman.algorithm.nodeToRemove = heapTree;\n        store.dispatch(updateAlgorithmProgress(payload));\n    }\n    if (newPhase === \"readyToReverse\") {\n        addInAndOutEdges();\n    }\n    if (currentPhase === \"readyToUnreverse\" && newPhase === \"solving\") {\n        assignKosarajuColors();\n    }\n    if (newPhase === \"solving\" && store.getState().selectedAlgorithm.cycleSearchMethod === \"unionFind\") {\n        const payload = { ...store.getState().data};\n        payload.kruskal.vertices.forEach((vertex, index) => {\n            vertex.leader = index;\n            vertex.followers = [index];\n        });\n    }\n    store.dispatch(updatePhase(newPhase));\n}","import { store } from \"../../index.js\";\nimport {\n    updateAlgorithmProgress,\n    } from \"../../actions\";\n\n//sets the top node of the heap tree as the first node in the stack that keeps track of heapTree navigation\nexport default function initializeHeapProgressData() {\n    const newAlgorithmProgress = store.getState().algorithmProgress;\n    newAlgorithmProgress.huffman.heapify.heapStack = [store.getState().data.huffman.heapTree];\n    store.dispatch(updateAlgorithmProgress(newAlgorithmProgress));\n}","export const kruskalInputSmall = {\n    vertices: [\n        {x: .550, y: .500},\n        {x: .845, y: .100},\n        {x: .620, y: .085},\n        {x: .510, y: .160},\n        {x: .100, y: .120},\n        {x: .078, y: .620},\n        {x: .150, y: .550},\n        {x: .910, y: .400},\n        {x: .710, y: .320},\n        {x: .890, y: .285},\n        {x: .630, y: .930}\n    ],\n\n    edges: [\n        {vertex1: 4, vertex2: 5, cost: 10},\n        {vertex1: 4, vertex2: 6, cost: 11} ,\n        {vertex1: 1, vertex2: 2, cost: 11},\n        {vertex1: 0, vertex2: 8, cost: 5},\n        {vertex1: 7, vertex2: 8, cost: 3},\n        {vertex1: 9, vertex2: 10, cost: 7},\n        {vertex1: 3, vertex2: 8, cost: 1},\n        {vertex1: 5, vertex2: 6, cost: 2},\n        {vertex1: 6, vertex2: 10, cost: 14},\n        {vertex1: 2, vertex2: 7, cost: 6},\n        {vertex1: 0, vertex2: 10, cost: 15},\n        {vertex1: 0, vertex2: 3, cost: 9},\n        {vertex1: 3, vertex2: 4, cost: 17},\n        {vertex1: 2, vertex2: 9, cost: 12},\n        {vertex1: 3, vertex2: 6, cost: 12},\n        {vertex1: 0, vertex2: 6, cost: 11},\n        {vertex1: 1, vertex2: 10, cost: 8},\n        {vertex1: 2, vertex2: 8, cost: 4},\n        {vertex1: 2, vertex2: 3, cost: 2}\n    ]\n}","export const kruskalInputLarge = {\n    vertices: [\n        {x: .550, y: .190},\n        {x: .470, y: .500},\n        {x: .540, y: .515},\n        {x: .600, y: .460},\n        {x: .890, y: .690},\n        {x: .600, y: .620},\n        {x: .470, y: .710},\n        {x: .630, y: .550},\n        {x: .715, y: .465},\n        {x: .675, y: .330},\n        {x: .620, y: .230},\n        {x: .735, y: .090},\n        {x: .030, y: .875},\n        {x: .310, y: .820},\n        {x: .060, y: .405},\n        {x: .180, y: .360},\n        {x: .970, y: .460},\n        {x: .790, y: .535},\n        {x: .925, y: .360},\n        {x: .905, y: .200},\n        {x: .950, y: .085},\n        {x: .390, y: .690},\n        {x: .370, y: .070},\n        {x: .210, y: .915},\n        {x: .575, y: .860},\n        {x: .950, y: .610},\n        {x: .955, y: .730},\n        {x: .840, y: .740},\n        {x: .900, y: .910},\n        {x: .775, y: .970},\n        {x: .420, y: .955},\n        {x: .665, y: .810},\n        {x: .360, y: .790},\n        {x: .390, y: .340},\n        {x: .325, y: .450},\n        {x: .255, y: .225},\n        {x: .150, y: .135},\n        {x: .130, y: .7000},\n        {x: .080, y: .905},\n        {x: .835, y: .115},\n        {x: .670, y: .080},\n        {x: .730, y: .235},\n        {x: .890, y: .080},\n        {x: .080, y: .285}\n    ],\n\n    edges: [\n        {vertex1: 0, vertex2: 2, cost: 11},\n        {vertex1: 6, vertex2: 24, cost: 3},\n        {vertex1: 21, vertex2: 34, cost: 13},\n        {vertex1: 26, vertex2: 28, cost: 22},\n        {vertex1: 14, vertex2: 37, cost: 6},\n        {vertex1: 1, vertex2: 34, cost: 7},\n        {vertex1: 8, vertex2: 40, cost: 8},\n        {vertex1: 13, vertex2: 32, cost: 4},\n        {vertex1: 19, vertex2: 39, cost: 3},\n        {vertex1: 22, vertex2: 33, cost: 28},\n        {vertex1: 23, vertex2: 38, cost: 2},\n        {vertex1: 17, vertex2: 31, cost: 23},\n        {vertex1: 1, vertex2: 6, cost: 14},\n        {vertex1: 16, vertex2: 19, cost: 6},\n        {vertex1: 13, vertex2: 21, cost: 10},\n        {vertex1: 8, vertex2: 18, cost: 10},\n        {vertex1: 1, vertex2: 21, cost: 10},\n        {vertex1: 14, vertex2: 34, cost: 5},\n        {vertex1: 12, vertex2: 38, cost: 7},\n        {vertex1: 1, vertex2: 33, cost: 21},\n        {vertex1: 24, vertex2: 28, cost: 29},\n        {vertex1: 19, vertex2: 41, cost: 28},\n        {vertex1: 9, vertex2: 41, cost: 9},\n        {vertex1: 21, vertex2: 37, cost: 9},\n        {vertex1: 7, vertex2: 8, cost: 6},\n        {vertex1: 26, vertex2: 29, cost: 12},\n        {vertex1: 1, vertex2: 2, cost: 31},\n        {vertex1: 15, vertex2: 36, cost: 8},\n        {vertex1: 12, vertex2: 14, cost: 4},\n        {vertex1: 5, vertex2: 7, cost: 24},\n        {vertex1: 17, vertex2: 18, cost: 14},\n        {vertex1: 11, vertex2: 40, cost: 35},\n        {vertex1: 15, vertex2: 35, cost: 6},\n        {vertex1: 15, vertex2: 33, cost: 1},\n        {vertex1: 21, vertex2: 32, cost: 4},\n        {vertex1: 19, vertex2: 20, cost: 2},\n        {vertex1: 14, vertex2: 43, cost: 22},\n        {vertex1: 13, vertex2: 23, cost: 8},\n        {vertex1: 13, vertex2: 37, cost: 5},\n        {vertex1: 4, vertex2: 27, cost: 3},\n        {vertex1: 2, vertex2: 7, cost: 20},\n        {vertex1: 33, vertex2: 35, cost: 7},\n        {vertex1: 2, vertex2: 6, cost: 30},\n        {vertex1: 12, vertex2: 37, cost: 18},\n        {vertex1: 24, vertex2: 30, cost: 20},\n        {vertex1: 13, vertex2: 30, cost: 16},\n        {vertex1: 9, vertex2: 10, cost: 10},\n        {vertex1: 3, vertex2: 7, cost: 21},\n        {vertex1: 29, vertex2: 31, cost: 30},\n        {vertex1: 2, vertex2: 3, cost: 30},\n        {vertex1: 13, vertex2: 38, cost: 9},\n        {vertex1: 5, vertex2: 30, cost: 12},\n        {vertex1: 12, vertex2: 13, cost: 11},\n        {vertex1: 3, vertex2: 9, cost: 5},\n        {vertex1: 23, vertex2: 30, cost: 22},\n        {vertex1: 5, vertex2: 24, cost: 6},\n        {vertex1: 5, vertex2: 31, cost: 27},\n        {vertex1: 15, vertex2: 43, cost: 30},\n        {vertex1: 12, vertex2: 21, cost: 14},\n        {vertex1: 3, vertex2: 10, cost: 18},\n        {vertex1: 18, vertex2: 40, cost: 11},\n        {vertex1: 18, vertex2: 19, cost: 22},\n        {vertex1: 4, vertex2: 17, cost: 17},\n        {vertex1: 5, vertex2: 28, cost: 7},\n        {vertex1: 2, vertex2: 22, cost: 5},\n        {vertex1: 23, vertex2: 32, cost: 12},\n        {vertex1: 0, vertex2: 22, cost: 18},\n        {vertex1: 25, vertex2: 26, cost: 31},\n        {vertex1: 27, vertex2: 29, cost: 16},\n        {vertex1: 14, vertex2: 15, cost: 25},\n        {vertex1: 22, vertex2: 36, cost: 12},\n        {vertex1: 11, vertex2: 41, cost: 7},\n        {vertex1: 27, vertex2: 31, cost: 8},\n        {vertex1: 22, vertex2: 35, cost: 2},\n        {vertex1: 10, vertex2: 40, cost: 30},\n        {vertex1: 4, vertex2: 18, cost: 17},\n        {vertex1: 4, vertex2: 26, cost: 2},\n        {vertex1: 10, vertex2: 11, cost: 7},\n        {vertex1: 34, vertex2: 37, cost: 19},\n        {vertex1: 30, vertex2: 32, cost: 19},\n        {vertex1: 3, vertex2: 8, cost: 22},\n        {vertex1: 0, vertex2: 33, cost: 35},\n        {vertex1: 0, vertex2: 40, cost: 22},\n        {vertex1: 0, vertex2: 10, cost: 35},\n        {vertex1: 14, vertex2: 21, cost: 12},\n        {vertex1: 36, vertex2: 43, cost: 21},\n        {vertex1: 24, vertex2: 31, cost: 21},\n        {vertex1: 16, vertex2: 18, cost: 22},\n        {vertex1: 39, vertex2: 41, cost: 7},\n        {vertex1: 35, vertex2: 36, cost: 13},\n        {vertex1: 4, vertex2: 25, cost: 33},\n        {vertex1: 6, vertex2: 32, cost: 8},\n        {vertex1: 7, vertex2: 31, cost: 13},\n        {vertex1: 7, vertex2: 27, cost: 20},\n        {vertex1: 20, vertex2: 42, cost: 4},\n        {vertex1: 16, vertex2: 25, cost: 23},\n        {vertex1: 26, vertex2: 27, cost: 20},\n        {vertex1: 8, vertex2: 17, cost: 2},\n        {vertex1: 15, vertex2: 34, cost: 22},\n        {vertex1: 16, vertex2: 20, cost: 14},\n        {vertex1: 11, vertex2: 42, cost: 6},\n        {vertex1: 11, vertex2: 39, cost: 5},\n        {vertex1: 1, vertex2: 5, cost: 16},\n        {vertex1: 33, vertex2: 34, cost: 26},\n        {vertex1: 1, vertex2: 32, cost: 8},\n        {vertex1: 5, vertex2: 6, cost: 31},\n        {vertex1: 28, vertex2: 29, cost: 34},\n        {vertex1: 10, vertex2: 41, cost: 9}\n    ]\n}","export const kosarajuInputSmall = {\n    vertices: [\n        {x: .155, y: .310},\n        {x: .780, y: .680},\n        {x: .560, y: .180},\n        {x: .960, y: .265},\n        {x: .655, y: .390},\n        {x: .270, y: .500},\n        {x: .100, y: .105},\n        {x: .895, y: .635},\n        {x: .800, y: .310},\n        {x: .335, y: .300},\n        {x: .805, y: .900},\n        {x: .105, y: .550},\n        {x: .915, y: .850}\n    ],\n    edges: [\n        {start: 6, end: 0},\n        {start: 11, end: 0},\n        {start: 5, end: 11},\n        {start: 5, end: 0},\n        {start: 9, end: 5},\n        {start: 0, end: 9},\n        {start: 9, end: 4},\n        {start: 9, end: 2},\n        {start: 2, end: 4},\n        {start: 4, end: 8},\n        {start: 8, end: 2},\n        {start: 8, end: 3},\n        {start: 4, end: 1},\n        {start: 8, end: 1},\n        {start: 1, end: 10},\n        {start: 10, end: 12},\n        {start: 12, end: 7},\n        {start: 7, end: 1},\n        {start: 1, end: 12},\n        {start: 7, end: 10}\n    ]\n}","export const kosarajuInputLarge = {\n    vertices: [\n        {x: .565, y: .380},\n        {x: .275, y: .435},\n        {x: .550, y: .460},\n        {x: .830, y: .065},\n        {x: .660, y: .750},\n        {x: .970, y: .575},\n        {x: .755, y: .485},\n        {x: .110, y: .220},\n        {x: .040, y: .670},\n        {x: .430, y: .370},\n        {x: .260, y: .555},\n        {x: .340, y: .650},\n        {x: .430, y: .545},\n        {x: .370, y: .235},\n        {x: .520, y: .315},\n        {x: .640, y: .500},\n        {x: .805, y: .205},\n        {x: .870, y: .360},\n        {x: .395, y: .100},\n        {x: .200, y: .025},\n        {x: .050, y: .245},\n        {x: .140, y: .195},\n        {x: .570, y: .715},\n        {x: .465, y: .790},\n        {x: .435, y: .960},\n        {x: .840, y: .665},\n        {x: .720, y: .610},\n        {x: .775, y: .885},\n        {x: .270, y: .125},\n        {x: .915, y: .220},\n        {x: .130, y: .435},\n        {x: .140, y: .780},\n        {x: .940, y: .860},\n        {x: .935, y: .345},\n        {x: .170, y: .730},\n        {x: .930, y: .495},\n        {x: .070, y: .865},\n        {x: .285, y: .885}\n        \n    ],\n    edges: [\n        {start: 23, end: 22},\n        {start: 13, end: 9},\n        {start: 0, end: 15},\n        {start: 2, end: 4},\n        {start: 30, end: 34},\n        {start: 35, end: 5},\n        {start: 16, end: 15},\n        {start: 37, end: 11},\n        {start: 21, end: 7},\n        {start: 26, end: 4},\n        {start: 12, end: 9},\n        {start: 1, end: 28},\n        {start: 1, end: 10},\n        {start: 15, end: 6},\n        {start: 29, end: 33},\n        {start: 0, end: 14},\n        {start: 1, end: 21},\n        {start: 12, end: 22},\n        {start: 0, end: 2},\n        {start: 23, end: 24},\n        {start: 6, end: 17},\n        {start: 18, end: 13},\n        {start: 34, end: 31},\n        {start: 27, end: 25},\n        {start: 1, end: 12},\n        {start: 9, end: 28},\n        {start: 20, end: 30},\n        {start: 13, end: 14},\n        {start: 17, end: 35},\n        {start: 27, end: 26},\n        {start: 23, end: 2},\n        {start: 25, end: 32},\n        {start: 29, end: 0},\n        {start: 19, end: 7},\n        {start: 8, end: 36},\n        {start: 21, end: 28},\n        {start: 29, end: 16},\n        {start: 13, end: 1},\n        {start: 34, end: 37},\n        {start: 18, end: 19},\n        {start: 11, end: 10},\n        {start: 25, end: 33},\n        {start: 8, end: 31},\n        {start: 7, end: 30},\n        {start: 36, end: 37},\n        {start: 14, end: 28},\n        {start: 4, end: 27},\n        {start: 18, end: 1},\n        {start: 28, end: 30},\n        {start: 11, end: 12},\n        {start: 8, end: 30},\n        {start: 32, end: 27},\n        {start: 14, end: 16},\n        {start: 29, end: 17},\n        {start: 11, end: 24},\n        {start: 3, end: 29},\n        {start: 9, end: 2},\n        {start: 33, end: 5},\n        {start: 7, end: 1},\n        {start: 34, end: 11},\n        {start: 7, end: 20},\n        {start: 34, end: 10},\n        {start: 9, end: 14},\n        {start: 5, end: 25},\n        {start: 2, end: 26},\n        {start: 10, end: 30},\n        {start: 19, end: 21},\n        {start: 22, end: 26},\n        {start: 26, end: 25},\n        {start: 16, end: 3},\n        {start: 6, end: 25},\n        {start: 34, end: 8},\n        {start: 0, end: 9},\n        {start: 31, end: 36},\n        {start: 4, end: 23},\n        {start: 20, end: 19},\n        {start: 1, end: 9},\n        {start: 35, end: 6},\n        {start: 11, end: 23},\n        {start: 8, end: 10}\n    ]\n}","export default class TreeNode {\n    constructor(chars=null, freq=null) {\n        this.chars = chars;\n        this.freq = freq;\n        this.children = [];\n        this.parent = null;\n        this.depthIndex = 1;\n        this.localWidthIndex = 0;\n    }\n    assignChild = childNode => {\n        const currentChildren = this.children.length;\n        this.children.push(childNode);\n        childNode.localWidthIndex = currentChildren;\n        childNode.depthIndex = this.depthIndex + 1;\n        childNode.parent = this;\n        // console.log(`assigning child with chars ${childNode.chars} to parent with chars ${this.chars}.  This = `, this);\n    }\n\n    copy = () => {\n        const copyNode = new TreeNode(this.chars, this.freq);\n        this.children.forEach(child => {\n            const newChild = child.copy();\n            copyNode.assignChild(newChild);\n        });\n        copyNode.depthIndex = this.depthIndex;\n        copyNode.localWidthIndex = this.localWidthIndex;\n        return copyNode;\n    }\n}","export default function unfindTreeData(treeData, removeSelected=false) {\n    if (Object.keys(treeData).length === 0) {\n        return;\n    }\n    let stack = [treeData];\n    let phase = 1;\n    while (phase <= 2) {\n        const stackObj = stack[stack.length - 1];\n        if (stackObj.children.length === 0) {\n            stackObj.visited = false;\n            stackObj.searched = phase === 1;\n            if (removeSelected) {\n                stackObj.selected = false;\n            }\n            stack.pop();\n        }\n        else {\n            if (stackObj.children[0].searched === (phase === 2) || stackObj.children[0].searched === undefined) {\n                stack.push(stackObj.children[0]);\n            }\n            else if (stackObj.children.length > 1) {\n                if (stackObj.children[1].searched === (phase === 2) || stackObj.children[1].searched === undefined) {\n                    stack.push(stackObj.children[1]);\n                }\n                else {\n                    stackObj.visited = false;\n                    stackObj.searched = phase === 1;\n                    if (removeSelected) {\n                        stackObj.selected = false;\n                    }\n                    stack.pop();\n                }\n            }\n            else {\n                stackObj.visited = false;\n                stackObj.searched = phase === 1;\n                if (removeSelected) {\n                    stackObj.selected = false;\n                }\n                stack.pop();\n            }\n        }\n        if (stack.length === 0) {\n            stack = [treeData];\n            phase++;\n        }\n    }\n}","export default function appendNodeToHeap(heapTree, nodeToInsert) {\n    let maxDepth = 1;\n    let inserted = false;\n    let searchPhase = 1\n    let queue = [heapTree];\n    while (!inserted) {\n        if (queue.length === 0) {\n            queue = [heapTree];\n            searchPhase++;\n        }\n        let queueObj = queue[0];\n        if (queueObj.parent) {\n            queueObj.depthIndex = queueObj.parent.depthIndex + 1;\n            if (queueObj.depthIndex > maxDepth) {\n                maxDepth = queueObj.depthIndex;\n            }\n        }\n        if (queueObj.children.length < 1) {\n            if (searchPhase === 3 || (searchPhase === 2 && queueObj.depthIndex < maxDepth)) {\n                queueObj.assignChild({ ...nodeToInsert});\n                inserted = true;\n            }\n            else {\n                queue.shift();\n            }\n        }\n        else if (queueObj.children.length === 1) {\n            queueObj.assignChild({ ...nodeToInsert});\n                inserted = true;\n        }\n        else {\n            queue.shift();\n            queue.push(queueObj.children[0]);\n            queue.push(queueObj.children[1]);\n        }\n    }\n    return heapTree;\n}\n\n","import { store } from \"../../index.js\";\nimport { updateData } from \"../../actions\";\nimport TreeNode from \"../dataClasses/TreeNode\";\nimport unfindTreeData from \"../treeFunctions/unfindTreeData.js\";\nimport appendNodeToHeap from \"../treeFunctions/appendNodeToHeap\";\n\nexport default function changeHuffmanDataOnInputChange(newInput) {\n    let payload = { ...store.getState().data };\n    if (newInput.length > 0) {\n        const frequencies = getNewFrequencies(newInput);\n        const heapTree = getNewHeapTreeFromFrequencies(frequencies);\n        const encodingTree = getNewEncodingTree(frequencies);\n        const chart = getNewChart(encodingTree);\n        payload.huffman = {\n            ...payload.huffman,\n            frequencies,\n            encodingTree,\n            heapTree,\n            chart,\n            input: newInput\n        }\n    }\n    else {\n        payload.huffman = {\n            frequencies: [],\n            encodingTree: null,\n            heapTree: null,\n            chart: [],\n            input: \"\"\n        }\n    }\n    store.dispatch(updateData(payload));\n}\n\n//returns list of characters and frequencies as an array of objects of class TreeNode\nfunction getNewFrequencies(input) {\n    const hashSet = {};\n    const frequencies = [];\n    for (let i = 0; i < input.length; i++) {\n        const alpha = input[i];\n        if (!hashSet[alpha] && hashSet[alpha] !== 0) {\n            hashSet[alpha] = frequencies.length;\n            const node = new TreeNode(alpha, 1)\n            frequencies.push(node);\n        }\n        else {\n            const index = hashSet[alpha];\n            frequencies[index].freq++;\n        }\n    }\n    return frequencies;\n}\n\n//takes nodes from frequencies array and puts them in tree structure (does not sort them yet)\nexport function getNewHeapTreeFromFrequencies(frequencies) {\n    if (frequencies.length === 0) {\n        return [];\n    }\n    let heapTree = new TreeNode(frequencies[0].chars, frequencies[0].freq);\n    for (let i = 1; i < frequencies.length; i++) {\n        const newNode = new TreeNode(frequencies[i].chars, frequencies[i].freq); \n        heapTree = appendNodeToHeap(heapTree, newNode);\n    }\n    return heapTree;\n}\n\n//takes nodes from frequencies array and puts them as leaves in tree structure.\n//the higher order nodes will not have characters but will have frequencies equal to the\n//sum of the frequencies of the leaves underneath them\nexport function getNewEncodingTree(frequencies) {\n    let tree = [ ...frequencies];\n    while (tree.length > 1) {\n        const nextTreeStep = [];\n        for (let i = 0; i < tree.length; i += 2) {\n            let branch;\n            if (i + 1 < tree.length) {\n                branch = new TreeNode;\n                const newNode1 = tree[i].copy();\n                const newNode2 = tree[i + 1].copy();\n                branch.assignChild(newNode1);\n                branch.assignChild(newNode2);\n            }\n            else {\n                branch = tree[i].copy();\n            }\n            nextTreeStep.push(branch);\n        }\n        tree = nextTreeStep;\n    }\n    return tree[0];\n}\n\n//for each leaf of the tree, retrieves a list of paths from top node to leaf, assining them as \n//zeroes and ones in a string\nexport function getNewChart(tree) {\n    let chart = [];\n    let stack = [tree];\n    while (stack.length > 0) {\n        const stackObj = stack[stack.length - 1];\n        if (stackObj.children.length === 0) {\n            chart.push(getChartObj(stackObj));\n            stackObj.visited = true;\n            stack.pop();\n        }\n        else if (stackObj.children.every(child => child.visited)) {\n            stackObj.visited = true;\n            stack.pop();\n        }\n        else {\n            if (stackObj.children.length > 1) {\n                stack.push(stackObj.children[1]);\n            }\n            if (!stackObj.children[0].visited) {\n                stack.push(stackObj.children[0]);\n            }\n        }\n    }\n    unfindTreeData(tree);\n    return chart;\n}\n\n//uses parent property of TreeNode objects to traverse the tree from each leaf to the top node\n//in order to retrieve the bit code for each character\nfunction getChartObj(stackObj) {\n    const bitCodeArray = [];\n    let pointer = stackObj;\n    while (pointer.parent) {\n        bitCodeArray.push(pointer.localWidthIndex);\n        pointer = pointer.parent;\n    }\n    return {char: stackObj.chars, freq: stackObj.freq, code: bitCodeArray.reverse().join(\"\")};\n}\n","import { store } from \"../../index.js\";\nimport { updateInput, updateData } from \"../../actions\";\nimport { kruskalInputSmall } from \"../../inputs/kruskalInputSmall\";\nimport { kruskalInputLarge } from \"../../inputs/kruskalInputLarge\";\nimport { kosarajuInputSmall } from \"../../inputs/kosarajuInputSmall\";\nimport { kosarajuInputLarge } from \"../../inputs/kosarajuInputLarge\";\nimport changeHuffmanDataOnInputChange from \"./changeHuffmanDataOnInputChange\";\nimport generateColors from \"../miscellaneous/generateColors\";\n \n//manages input change for different algorithms and calls methods to update data as a result\nexport default function changeInput(inputString) {\n    let payload;\n    const { type } = store.getState().selectedAlgorithm;\n    if (type === \"kruskal\") {\n        payload = inputString === \"small\" ? { ...kruskalInputSmall } : { ...kruskalInputLarge };\n        changeKruskalDataOnInputChange(payload, inputString);\n    }\n    if (type === \"kosaraju\") {\n        payload = inputString === \"small\" ? { ...kosarajuInputSmall } : { ...kosarajuInputLarge };\n        changeKosarajuDataOnInputChange(payload, inputString);\n    }\n    if (type === \"huffman\") {\n        payload = inputString.toUpperCase().split(\"\").map(alpha => {\n            return /\\s/.test(alpha) ? \" \" : alpha;\n        }).filter(alpha => /[A-Z\\s]/.test(alpha)).join(\"\");\n        changeHuffmanDataOnInputChange(payload);\n    }\n    store.dispatch(updateInput(payload));\n}\n\n//adds displayGraph property to edges and displayColors property to vertices using the generateColors\n//function to assign a unique color to each vertex\nfunction changeKruskalDataOnInputChange(newInput, inputString) {\n    const payload = { ...store.getState().data };\n    payload.kruskal.vertices = newInput.vertices;\n    const colorsArray = generateColors(payload.kruskal.vertices.length);\n    payload.kruskal.vertices.forEach((vertex, index) => vertex.displayColor = colorsArray[index]);\n    payload.kruskal.edges = newInput.edges;\n    payload.kruskal.edges.forEach(edge => edge.displayGraph = true);\n    payload.kruskal.input = inputString;\n    store.dispatch(updateData(payload));\n}\n\n//ensures that found, foundAgain and added properties of edges and vertices are initialized as false\nfunction changeKosarajuDataOnInputChange(newInput, inputString) {\n    const payload = { ...store.getState().data };\n    payload.kosaraju.vertices = newInput.vertices;\n    payload.kosaraju.vertices.forEach(vertex => {\n        vertex.found = false;\n        vertex.foundAgain = false;\n        vertex.added = false;\n    })\n    payload.kosaraju.edges = newInput.edges;\n    payload.kosaraju.edges.forEach(edge => {\n        edge.found = false;\n        edge.foundAgain = false;\n        edge.added = false;\n    })\n    payload.kosaraju.input = inputString;\n    payload.kosaraju.vertexIndex = [];\n    store.dispatch(updateData(payload));\n}","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./Header.css\";\n\nconst Header = () => {\n    return (\n        <div className=\"header\">\n            <div className=\"header-title\">\n                Algorithm Visualizer\n            </div>\n            <div className=\"menu-items\">\n                <div className=\"menu-link\" onClick={() => window.location.reload()}>\n                    <Link to=\"/\">Home</Link>\n                </div>\n                <div className=\"menu-link\" onClick={() => window.location.reload()}>\n                    <Link to=\"/kruskal\">Kruskal</Link>\n                </div>\n                <div className=\"menu-link\" onClick={() => window.location.reload()}>\n                    <Link to=\"/kosaraju\">Kosaraju</Link>\n                </div>\n                <div className=\"menu-link\" onClick={() => window.location.reload()}>\n                    <Link to=\"/huffman\">Huffman</Link>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Header;","import { store } from \"../../index.js\";\nimport {\n    updateFormInput,\n    } from \"../../actions\";\n\nexport default function changeFormInput(newInput) {\n    const payload = { ...store.getState().formInput }\n    const { type } = store.getState().selectedAlgorithm;\n    payload[type] = newInput; //note that this relies on the fact that the properties of formInput are spelled the same\n                                //as the selectedAlgorithm.type options\n    store.dispatch(updateFormInput(payload));\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { connect} from \"react-redux\";\nimport changeFormInput from \"../utils/changeStore/changeFormInput\";\nimport { addEdge } from \"../utils/changeStore/editInput\";\n\nconst KruskalForm = props => {\n\n     //sends updated form input to redux store\n    const updateForm = e => {\n        const payload = {...props.form, [e.target.name]: e.target.value};\n        changeFormInput(payload);\n    }\n\n    //updates input data in store and closes window\n    const onSubmit = () => {\n        if ((props.form.vertex1 || props.form.vertex1 === 0) && (props.form.vertex1 || props.form.vertex1 === 0) \n            && props.form.vertex1 < props.totalVertices && props.form.vertex2 < props.totalVertices && props.form.cost\n            && props.form.vertex1 !== props.form.vertex2) {\n                console.log(\"calling addEdge\");\n                addEdge(props.form.vertex1, props.form.vertex2, props.form.cost);\n            }\n        props.hideForm();\n    }\n\n    return ReactDOM.createPortal(\n        <div className=\"ui dimmer modals visible active\" onClick={props.hideForm}>\n            <div className=\"ui standard modal visible active custom-padding\" onClick={(e) => e.stopPropagation()}>\n                <div className=\"ui form\">\n                <div className=\"form-row\">\n                    <span className=\"button-row-label\" >enter first vertex:</span>\n                    <br />\n                    <input onChange={updateForm} className=\"ui input\" type=\"number\" name=\"vertex1\" value={props.form.vertex1} autoComplete=\"off\"></input>\n                </div>\n                <div className=\"form-row\">\n                    <span className=\"button-row-label\" >enter second vertex:</span>\n                    <br />\n                    <input onChange={updateForm} type=\"number\" name=\"vertex2\" value={props.form.vertex2} autoComplete=\"off\"></input>\n                </div>\n                <div className=\"form-row\">\n                    <span className=\"button-row-label\" >enter cost:</span>\n                    <br />\n                    <input onChange={updateForm} type=\"number\" name=\"cost\" value={props.form.cost} autoComplete=\"off\"></input>\n                </div>\n                </div>\n                <div className=\"actions\">\n                    <button onClick={onSubmit} className=\"ui button primary\">Submit</button>\n                    <button onClick={props.hideForm} className=\"ui button\">Cancel</button>\n                </div>\n            </div>\n        </div>,\n        document.querySelector(\"#modal\")\n    );\n}\n\nconst mapStateToProps = state => {\n    return {\n        form: state.formInput.kruskal,\n        totalVertices: state.data.kruskal.vertices.length\n    };\n}\n\nexport default connect(mapStateToProps)(KruskalForm);","import { store } from \"../index.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\n\nimport changeInput from \"../utils/changeStore/changeInput\";\nimport { changeEditGraph } from \"../utils/changeStore/editInput\";\nimport addEdgeToSort from \"../utils/changeStore/addEdgeToSort\";\nimport KruskalForm from \"./KruskalForm\";\n\n//buttons displayed when user accesses Kruskal page\nconst ButtonsKruskal1 = props => {\n\n    //regulates whether the modal form is displayed for adding edge input\n    const [displayForm, setDisplayForm] = React.useState(false);\n\n    const hideForm = () => {\n        setDisplayForm(false);\n    }\n\n    //renders instructions based on edit graph options the user has selected\n    const renderText = () => {\n        switch (true) {\n            case props.editGraph.dragVertex:\n                return \"(click and drag vertices to change their position)\";\n            case props.editGraph.addVertex:\n                return \"(click on the canvas to add a vertex)\";\n            case props.editGraph.deleteVertex:\n                return \"(click on vertices to remove them)\";\n            case props.editGraph.deleteEdge:\n                return \"(click on two vertices to remove the connecting edge)\"\n            default:\n                return \"\";\n        }\n    }\n\n    //adds edges to sort station individually\n    const addEdgesHandler = () => {\n        const handler = setInterval(() => {\n            const phase = store.getState().phase;\n            if (phase !== \"notStarted\") {\n                clearInterval(handler);\n            }\n            else {\n                addEdgeToSort();\n            }\n        }, 10);\n    }\n\n    return (\n        <div className=\"conditional-content\">\n            {displayForm && <KruskalForm hideForm ={hideForm}/>}\n            <div className=\"step-display\">\n                Step 1: Edit Graph\n            </div>\n            <div className=\"button-row\">\n                <span className=\"button-row-label\" >choose input:</span>\n                <br />\n                <button onClick={() => changeInput(\"small\")} className={`ui button primary ${props.input === \"small\" && \"selected\"}`}>Small Input</button>\n                <button onClick={() => changeInput(\"large\")} className={`ui button primary ${props.input === \"large\" && \"selected\"}`}>Large Input</button>\n            </div>\n            <div className=\"button-row\">\n                <span className=\"button-row-label\" >edit:</span>\n                <br />\n                <button onClick={() => changeEditGraph(\"dragVertex\")} className={`ui button primary ${props.editGraph.dragVertex && \"selected\"}`}>Move Vertices</button>\n                <button onClick={() => changeEditGraph(\"addVertex\")} className={`ui button primary ${props.editGraph.addVertex && \"selected\"}`}>Add Vertices</button>\n                <button onClick={() => changeEditGraph(\"deleteVertex\")} className={`ui button primary ${props.editGraph.deleteVertex && \"selected\"}`}>Delete Vertices</button>\n                <button onClick={() => setDisplayForm(true)} className=\"ui button primary\">Add Edges</button>\n                <button onClick={() => changeEditGraph(\"deleteEdge\")} className={`ui button primary ${props.editGraph.deleteEdge && \"selected\"}`}>Delete Edges</button>\n            </div>\n            <div className=\"button-row\">\n                <span className=\"button-row-label\" >start algorithm:</span>\n                <br />\n                <button onClick={addEdgesHandler} className=\"ui button primary\">Begin</button>\n            </div>\n            <div className=\"message-display\">\n                {renderText()}\n            </div>\n        </div>\n    );\n}\n\nconst mapStateToProps = state => {\n    return {\n        editGraph: state.editGraph,\n        input: state.data.kruskal.input,\n    }\n}\n\nexport default connect(mapStateToProps)(ButtonsKruskal1);","import { store } from \"../../index.js\";\nimport {\n    updatePhase,\n    updateData,\n    updateAlgorithmProgress\n    } from \"../../actions\";\n\n//changes displayGraph and displaySort properties of edges one at a time    \nexport default function addEdgeToSort() {\n    const { algorithmProgress } = store.getState();\n    const { count } = algorithmProgress.kruskal.addEdges;\n    const progressPayload = { ...algorithmProgress };\n    const dataPayload = { ...store.getState().data};\n    dataPayload.kruskal.edges[count].displayGraph = false;\n    dataPayload.kruskal.edges[count].displaySort = true;\n    store.dispatch(updateData(dataPayload));\n    progressPayload.kruskal.addEdges.count++;\n    store.dispatch(updateAlgorithmProgress(progressPayload));\n    if (count + 1 === dataPayload.kruskal.edges.length) {\n        store.dispatch(updatePhase(\"choosingSort\"));\n    }\n}\n\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { changePhase, changeSelectedAlgorithmSortMethod } from \"../utils/changeStore/changeBasicInfo\";\n\n\nconst ButtonsKruskal2 = props => {\n\n    return (\n        <div className=\"conditional-content\">\n            <div className=\"step-display\">\n                Step 2: Choose Sorting Method\n            </div>\n            <div className=\"button-row\">\n                <button onClick={() => changeSelectedAlgorithmSortMethod(\"merge\")} className={`ui button primary ${props.sortMethod === \"merge\" && \"selected\"}`}>Merge Sort (fast)</button>\n                <button onClick={() => changeSelectedAlgorithmSortMethod(\"quick\")} className={`ui button primary ${props.sortMethod === \"quick\" && \"selected\"}`}>Quick Sort (fast)</button>\n                <button onClick={() => changeSelectedAlgorithmSortMethod(\"bubble\")} className={`ui button primary ${props.sortMethod === \"bubble\" && \"selected\"}`}>Bubble Sort (slow)</button>\n                <button onClick={() => changeSelectedAlgorithmSortMethod(\"selection\")} className={`ui button primary ${props.sortMethod === \"selection\" && \"selected\"}`}>Selection Sort (slow)</button>\n            </div>\n            <div className=\"button-row\">\n                <span className=\"button-row-label\" >start algorithm:</span>\n                <br />\n                <button onClick={() => changePhase(\"sorting\")} className=\"ui button primary\">Continue</button>\n            </div>\n        </div>\n    );\n}\n\nconst mapStateToProps = state => {\n    return {\n        sortMethod: state.selectedAlgorithm.sortMethod\n    }\n}\n\nexport default connect(mapStateToProps)(ButtonsKruskal2);","import { store } from \"../../index.js\";\nimport {\n    updatePhase,\n    updateData,\n    updateAlgorithmProgress\n    } from \"../../actions\";\n\nexport default function nextMergeSortStep() {\n    const newAlgorithmProgress = { ...store.getState().algorithmProgress };\n    const newData = { ...store.getState().data };\n    const { edges } = newData.kruskal;\n    const newEdges = [...edges]\n    const { partitions, currentPartition, currentSection, loopIndex, numInvisible } = newAlgorithmProgress.kruskal.mergeSort;\n    const sectionLength = partitions[currentPartition][currentSection];\n    let newSection = false;\n    if (numInvisible === 0) {\n        //move on to a new section to merge\n        newSection = true;\n        let edgesInSection = [];\n        for (let i = loopIndex; i < loopIndex + sectionLength; i++) {\n            edgesInSection.push({cost: edges[i].cost, index: i});\n        }\n        //sort edges in place and reveal them by setting their visibility back in subsequent steps\n        edgesInSection = sortEdges(edgesInSection);\n        for (let i = loopIndex; i < loopIndex + sectionLength; i++) {\n            newEdges[i] = edges[edgesInSection[i - loopIndex].index];\n            newEdges[i].displaySort = i === loopIndex ? true : false;\n        }\n    }\n    else {\n        //if we are in the middle of a section that is merging, simply display the next edge\n        newEdges[loopIndex].displaySort = true;\n    }\n    newData.kruskal.edges = newEdges;\n    store.dispatch(updateData(newData));\n    if (loopIndex + 1 >= edges.length) {\n        //find next loop values\n        if (currentPartition === 0) {\n            store.dispatch(updatePhase(\"choosingCycleSearchMethod\"));\n        }\n        else {\n            newAlgorithmProgress.kruskal.mergeSort.currentPartition = currentPartition - 1;\n            newAlgorithmProgress.kruskal.mergeSort.currentSection = 0;\n            newAlgorithmProgress.kruskal.mergeSort.loopIndex = 0;\n        }\n    }\n    else {\n        newAlgorithmProgress.kruskal.mergeSort.loopIndex = loopIndex + 1;\n        newAlgorithmProgress.kruskal.mergeSort.currentSection = (numInvisible === 1 || sectionLength === 1) ? currentSection + 1 : currentSection;\n    }\n    newAlgorithmProgress.kruskal.mergeSort.numInvisible = newSection ? sectionLength - 1 : numInvisible - 1;\n    store.dispatch(updateData(newData));\n    store.dispatch(updateAlgorithmProgress(newAlgorithmProgress));\n}\n\nfunction sortEdges(edgesInput) {\n    let edges = [...edgesInput]\n    const sorted = [];\n    while (edges.length > 0) {\n        let nextEdge = edges[0];\n        edges.forEach(edge => {\n            if (edge.cost < nextEdge.cost) {\n                nextEdge = edge;\n            }\n        });\n        edges = edges.filter(edge => edge.index !== nextEdge.index);\n        sorted.push(nextEdge);\n    }\n    return sorted;\n}","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { store } from \"../index\";\nimport nextMergeSortStep from \"../utils/changeStore/nextMergeSortStep\";\nimport nextQuickSortStep from \"../utils/changeStore/nextQuickSortStep\";\nimport nextBubbleSortStep from \"../utils/changeStore/nextBubbleSortStep\";\nimport nextSelectionSortStep from \"../utils/changeStore/nextSelectionSortStep\";\n\n\nconst ButtonsKruskal3 = props => {\n    //runs next step of the algorithm each interval and stops when phase changes\n    const nextStepHandler = () => {\n        const handler = setInterval(() => {\n            console.log(\"iterating\");\n            const phase = store.getState().phase;\n            if (phase !== \"sorting\") {\n                clearInterval(handler);\n            }\n            else {\n                nextStep();\n            }\n        }, props.numberOfEdges > 35 ? 10 : 50);\n    }\n\n    //determines which sort method to run the next step of based on user-selected sort method option\n    const nextStep = () => {\n        switch (props.sortMethod) {\n            case \"merge\":\n                nextMergeSortStep();\n                break;\n            case \"quick\":\n                nextQuickSortStep();\n                break;\n            case \"bubble\":\n                nextBubbleSortStep();\n                break;\n            default:\n                nextSelectionSortStep();\n        }\n    }\n\n    return (\n        <div className=\"conditional-content\">\n            <div className=\"step-display\">\n                Step 3: Run Sort\n            </div>\n            <div className=\"button-row\">\n                <button onClick={nextStep} className={\"ui button primary\"}>Next sort step</button>\n                <button onClick={nextStepHandler} className={\"ui button primary\"}>Run sort</button>\n            </div>\n        </div>\n    );\n}\n\nconst mapStateToProps = state => {\n    return {\n        sortMethod: state.selectedAlgorithm.sortMethod,\n        numberOfEdges: state.data.kruskal.edges.length\n    }\n}\n\nexport default connect(mapStateToProps)(ButtonsKruskal3);","import { store } from \"../../index.js\";\nimport {\n    updatePhase,\n    updateData,\n    updateAlgorithmProgress\n    } from \"../../actions\";\n\nexport default function nextQuickSortStep() {\n    const newAlgorithmProgress = { ...store.getState().algorithmProgress };\n    const newData = { ...store.getState().data };\n    const { edges } = newData.kruskal;\n    const newEdges = [...edges];\n    //for each range to sort, the pivot index will begin at the beginning and bubble up and the swap index\n    //will begin at the top and bubble down\n    const { unsortedRanges, pivotIndex, swapIndex } = newAlgorithmProgress.kruskal.quickSort;\n    if (edges[pivotIndex].cost < edges[pivotIndex + 1].cost) {\n        //if the next edge is greater than the pivot, switch it with the swap index and decrease the swap index\n        newEdges[pivotIndex + 1] = edges[swapIndex];\n        newEdges[swapIndex] = edges[pivotIndex + 1];\n        newAlgorithmProgress.kruskal.quickSort.swapIndex--;\n    }\n    else {\n        //otherwise switch it with the pivot index and increase the pivot index\n        newEdges[pivotIndex + 1] = edges[pivotIndex];\n        newEdges[pivotIndex] = edges[pivotIndex + 1];\n        newAlgorithmProgress.kruskal.quickSort.pivotIndex++;\n    }\n    if (newAlgorithmProgress.kruskal.quickSort.pivotIndex === newAlgorithmProgress.kruskal.quickSort.swapIndex) {\n        //when the pivot and swap index are equal, we are done with this range and can move onto the subrange below\n        //the pivot index if it is greater than one\n        for (let i = unsortedRanges[0][0]; i <= unsortedRanges[0][1]; i++) {\n            newEdges[i].sortDisplayColor = null;\n        }\n        const newUnsortedRanges = [];\n        if (unsortedRanges[0][0] < newAlgorithmProgress.kruskal.quickSort.pivotIndex - 1) {\n            newUnsortedRanges.push([unsortedRanges[0][0], newAlgorithmProgress.kruskal.quickSort.pivotIndex - 1]);\n        }\n        if (unsortedRanges[0][1] > newAlgorithmProgress.kruskal.quickSort.pivotIndex + 1) {\n            newUnsortedRanges.push([newAlgorithmProgress.kruskal.quickSort.pivotIndex + 1, unsortedRanges[0][1]]);\n        }\n        for (let i = 1; i < unsortedRanges.length; i++) {\n            newUnsortedRanges.push(unsortedRanges[i]);\n        }\n        if (newUnsortedRanges.length === 0) {\n            store.dispatch(updatePhase(\"choosingCycleSearchMethod\"));\n        }\n        else {\n            newAlgorithmProgress.kruskal.quickSort.unsortedRanges = newUnsortedRanges;\n            newAlgorithmProgress.kruskal.quickSort.pivotIndex = newUnsortedRanges[0][0];\n            newAlgorithmProgress.kruskal.quickSort.swapIndex = newUnsortedRanges[0][1];\n            for (let i = newUnsortedRanges[0][0]; i <= newUnsortedRanges[0][1]; i++) {\n                newEdges[i].sortDisplayColor = \"cyan\";\n            }\n            newEdges[newAlgorithmProgress.kruskal.quickSort.pivotIndex].sortDisplayColor = \"blue\";\n        }\n    }\n    newData.kruskal.edges = newEdges;\n    store.dispatch(updateData(newData));\n    store.dispatch(updateAlgorithmProgress(newAlgorithmProgress));\n}","import { store } from \"../../index.js\";\nimport {\n    updatePhase,\n    updateData,\n    updateAlgorithmProgress\n    } from \"../../actions\";\n\nexport default function nextBubbleSortStep() {\n    const { edges } = store.getState().data.kruskal;\n    const numEdges = edges.length;\n    const newEdges = [...edges];\n    const newAlgorithmProgress = { ...store.getState().algorithmProgress};\n    const { iIndex, jIndex } = newAlgorithmProgress.kruskal.bubbleSort; //the two loop indexes used in bubble sort\n    const newDataPayload = { ...store.getState().data };\n    newEdges[jIndex].sortDisplayColor = null;\n    newEdges[jIndex + 1].sortDisplayColor = null;\n    if (edges[jIndex].cost > edges[jIndex + 1].cost) { //determines whether to swap edges\n        newEdges[jIndex] = edges[jIndex + 1];\n        newEdges[jIndex + 1] = edges[jIndex];\n    }\n    if (jIndex === numEdges - iIndex - 2) {\n        if (iIndex === numEdges - 2) {\n            store.dispatch(updatePhase(\"choosingCycleSearchMethod\"));\n        }\n        else {\n            newAlgorithmProgress.kruskal.bubbleSort.iIndex = iIndex + 1;\n            newAlgorithmProgress.kruskal.bubbleSort.jIndex = 0;\n        }\n    }\n    else {\n        newAlgorithmProgress.kruskal.bubbleSort.jIndex = jIndex + 1;\n    }\n    const newJIndex = newAlgorithmProgress.kruskal.bubbleSort.jIndex\n    //sets display to red if edges will be swapped and blue otherwise\n    const nextDisplayColor = newEdges[newJIndex].cost > newEdges[newJIndex + 1].cost ? \"red\" : \"blue\"; \n    newEdges[newJIndex].sortDisplayColor = nextDisplayColor;\n    newEdges[newJIndex + 1].sortDisplayColor = nextDisplayColor;\n    newDataPayload.kruskal.edges = newEdges;\n    store.dispatch(updateData(newDataPayload));\n    store.dispatch(updateAlgorithmProgress(newAlgorithmProgress));\n}","import { store } from \"../../index.js\";\nimport {\n    updatePhase,\n    updateData,\n    updateAlgorithmProgress\n    } from \"../../actions\";\n\nexport default function nextSelectionSortStep() {\n    const newAlgorithmProgress = { ...store.getState().algorithmProgress };\n    const newData = { ...store.getState().data };\n    const { edges } = newData.kruskal;\n    const newEdges = [...edges];\n    newEdges.forEach(edge => edge.sortDisplayColor = null);\n    const { iIndex, jIndex, minIndex } = newAlgorithmProgress.kruskal.selectionSort;\n    newEdges[jIndex].sortDisplayColor = \"cyan\";\n    newEdges[minIndex].sortDisplayColor = \"blue\";\n    if (edges[jIndex].cost < edges[minIndex].cost) {\n        //as jIndex loops through the unsorted edges, minIndex keeps track of the lowest one in each cycle\n        newAlgorithmProgress.kruskal.selectionSort.minIndex = jIndex;\n    }\n    if (jIndex === edges.length - 1) {\n        //when we reach the end of the cycle, the edge at minIndex is swapped with that of iIndex\n        //iIndex then increases by one for the next cycle\n        newEdges[iIndex] = edges[newAlgorithmProgress.kruskal.selectionSort.minIndex];\n        newEdges[newAlgorithmProgress.kruskal.selectionSort.minIndex] = edges[iIndex];\n        if (iIndex + 2 === edges.length) {\n            store.dispatch(updatePhase(\"choosingCycleSearchMethod\"));\n        }\n        else {\n            newAlgorithmProgress.kruskal.selectionSort.iIndex = iIndex + 1;\n            newAlgorithmProgress.kruskal.selectionSort.jIndex = iIndex + 1;\n            newAlgorithmProgress.kruskal.selectionSort.minIndex = iIndex + 1;\n        }\n    }\n    else {\n        newAlgorithmProgress.kruskal.selectionSort.jIndex++;\n    }\n    newData.kruskal.edges = newEdges;\n    store.dispatch(updateData(newData));\n    store.dispatch(updateAlgorithmProgress(newAlgorithmProgress));\n}","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { changePhase, changeSelectedAlgorithmCycleSearchMethod } from \"../utils/changeStore/changeBasicInfo\";\n\n\nconst ButtonsKruskal4 = props => {\n\n    return (\n        <div className=\"conditional-content\">\n            <div className=\"step-display\">\n                Step 4: Choose Algorithm Method\n            </div>\n            <div className=\"button-row\">\n                <button \n                    onClick={() => changeSelectedAlgorithmCycleSearchMethod(\"unionFind\")} \n                    className={`ui button primary ${props.cycleSearchMethod === \"unionFind\" && \"selected\"}`}\n                >\n                    Union-Find (fast)\n                </button>\n                <button \n                    onClick={() => changeSelectedAlgorithmCycleSearchMethod(\"depthFirstSearch\")} \n                    className={`ui button primary ${props.cycleSearchMethod === \"depthFirstSearch\" && \"selected\"}`}\n                >\n                    Search for cycles (slow)\n                </button>\n            </div>\n            <div className=\"button-row\">\n                <span className=\"button-row-label\" >start algorithm:</span>\n                <br />\n                <button onClick={() => changePhase(\"solving\")} className=\"ui button primary\">Continue</button>\n            </div>\n        </div>\n    );\n}\n\nconst mapStateToProps = state => {\n    return {\n        cycleSearchMethod: state.selectedAlgorithm.cycleSearchMethod\n    }\n}\n\nexport default connect(mapStateToProps)(ButtonsKruskal4);","import { store } from \"../../index.js\";\nimport {\n    updatePhase,\n    updateData,\n    updateAlgorithmProgress\n    } from \"../../actions\";\n\nexport default function nextUnionFindStep() {\n    const newData = { ...store.getState().data };\n    const { vertices, edges } = newData.kruskal;\n    const newAlgorithmProgress = { ...store.getState().algorithmProgress }\n    const { edgesChecked, edgesAdded } = newAlgorithmProgress.kruskal.unionFind;\n    const edgeToTest = edges[edgesChecked];\n    const { vertex1, vertex2 } = edgeToTest;\n    newAlgorithmProgress.kruskal.unionFind.edgesChecked++;\n    newData.kruskal.edges[edgesChecked].flash = true;\n    if (vertices[vertex1].leader === vertices[vertex2].leader) {\n        //if the vertices on both ends of the edge have the same leader, a cycle would be created and the edge\n        //is not added to the graph\n        if (edgesChecked >= edges.length - 1) {\n            store.dispatch(updatePhase(\"completed\"));\n            return;\n        }\n    }\n    else {\n        //otherwise we add the edge and update the followers of the smaller group to have the same leader \n        //and color as the larger group\n        newAlgorithmProgress.kruskal.unionFind.edgesAdded++;\n        newData.kruskal.edges[edgesChecked].displayGraph = true;\n        newData.kruskal.edges[edgesChecked].displaySort = false;\n        const newLeader = vertices[vertices[vertex1].leader].followers.length > vertices[vertices[vertex2].leader].followers.length ? vertices[vertex1].leader : vertices[vertex2].leader;\n        const newFollower = vertices[vertices[vertex1].leader].followers.length > vertices[vertices[vertex2].leader].followers.length ? vertices[vertex2].leader : vertices[vertex1].leader;\n        for (let i = 0; i < vertices[newFollower].followers.length; i++) {\n            const follower = vertices[newFollower].followers[i];\n            newData.kruskal.vertices[follower].leader = newLeader;\n            newData.kruskal.vertices[follower].displayColor = vertices[newLeader].displayColor;\n            newData.kruskal.vertices[newLeader].followers.push(follower);\n        }\n        if (edgesAdded === vertices.length - 2) {\n            store.dispatch(updatePhase(\"completed\"));\n        }\n    }\n    store.dispatch(updateData(newData));\n    store.dispatch(updateAlgorithmProgress(newAlgorithmProgress));\n    const newestData = { ...newData }\n    newestData.kruskal.edges[edgesChecked] = { ...newData.kruskal.edges[edgesChecked]};\n    newestData.kruskal.edges[edgesChecked].flash = false;\n    setTimeout(() => {\n        store.dispatch(updateData(newestData));\n    }, 100)\n}","import { store } from \"../../index.js\";\nimport {\n    updatePhase,\n    updateData,\n    updateAlgorithmProgress\n    } from \"../../actions\";\n\n\n //uses a cache of vertices and edges to keep track of which ones have been found by the current search   \nexport default function nextSearchCyclesStep() {\n    const newData = { ...store.getState().data };\n    const { vertices, edges } = newData.kruskal;\n    const { algorithmProgress } = store.getState();\n    const { testing, vertexCache, edgeCache, vertexStack, edgesChecked, edgesAdded } = algorithmProgress.kruskal.searchCycles;\n    const newAlgorithmProgress = { ...algorithmProgress };\n    const edgeToTest = edges[edgesChecked];\n    if (!testing) {\n        //if an edge is not currently being tested for cycles, add the next one\n        newAlgorithmProgress.kruskal.searchCycles.edgeCache = {[edgesChecked]: true};\n        newAlgorithmProgress.kruskal.searchCycles.testing = true;\n        newAlgorithmProgress.kruskal.searchCycles.vertexCache = { [edgeToTest.vertex2]: true };\n        newAlgorithmProgress.kruskal.searchCycles.vertexStack = [edgeToTest.vertex2];\n        newData.kruskal.edges[edgesChecked].flash = true;\n    }\n    else if (vertexStack.length === 0) {\n        if (edgesAdded >= vertices.length - 2) {\n            store.dispatch(updatePhase(\"completed\"));\n        }\n        //if the stack is zero and we haven't run into our starting point, there are no cycles and we can\n        //add the edge to our graph, reset the search data and continue\n        newAlgorithmProgress.kruskal.searchCycles.edgesChecked++;\n        newAlgorithmProgress.kruskal.searchCycles.edgesAdded++;\n        newAlgorithmProgress.kruskal.searchCycles.edgeCache = {};\n        newAlgorithmProgress.kruskal.searchCycles.testing = false;\n        newAlgorithmProgress.kruskal.searchCycles.vertexCache = {};\n        newAlgorithmProgress.kruskal.searchCycles.vertexStack = [];\n        newData.kruskal.edges[edgesChecked].displayGraph = true;\n        newData.kruskal.edges[edgesChecked].displaySort = false;\n        newData.kruskal.edges.forEach(edge => edge.flash = false);\n    }\n    else if (vertexStack[vertexStack.length - 1] === edgeToTest.vertex1) {\n        if (edgesChecked >= edges.length - 1) {\n            store.dispatch(updatePhase(\"completed\"));\n        }\n        //if the vertex at the top of the stack is equal to the other vertex on the edge we're testing,\n        //then we have discovered a cycle and the edge is not added to the graph\n        newAlgorithmProgress.kruskal.searchCycles.edgesChecked++;\n        newAlgorithmProgress.kruskal.searchCycles.edgeCache = {};\n        newAlgorithmProgress.kruskal.searchCycles.testing = false;\n        newAlgorithmProgress.kruskal.searchCycles.vertexCache = {};\n        newAlgorithmProgress.kruskal.searchCycles.vertexStack = [];\n    }\n    else {\n        //otherwise, find the next edges leading out of the vertex at the top of the stack\n        const nextEdges = findEdgesKruskal(vertexStack[vertexStack.length - 1], edges, edgeCache);\n        if (nextEdges.length === 0) {\n            newAlgorithmProgress.kruskal.searchCycles.vertexStack.pop();\n        }\n        else {\n            newAlgorithmProgress.kruskal.searchCycles.edgeCache[nextEdges[0]] = true;\n            newData.kruskal.edges[nextEdges[0]].flash = true;\n            const nextVertex = edges[nextEdges[0]].vertex1 === vertexStack[vertexStack.length - 1] ?\n                edges[nextEdges[0]].vertex2 : edges[nextEdges[0]].vertex1;\n            if (!vertexCache[nextVertex]) {\n                newAlgorithmProgress.kruskal.searchCycles.vertexStack.push(nextVertex);\n                newAlgorithmProgress.kruskal.searchCycles.vertexCache[nextVertex] = true;\n            }\n        }\n    }\n    store.dispatch(updateData(newData));\n    store.dispatch(updateAlgorithmProgress(newAlgorithmProgress));\n}\n\nfunction findEdgesKruskal(vertex, edges, edgeCache) {\n    const nextEdges = [];\n    edges.forEach((edge, index) => {\n        if ((edge.vertex1 === vertex || edge.vertex2 === vertex) && !edgeCache[index] && edge.displayGraph) {\n            nextEdges.push(index);\n        }\n    });\n    return nextEdges;\n}","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { store } from \"../index\";\nimport nextUnionFindStep from \"../utils/changeStore/nextUnionFindStep\";\nimport nextSearchCyclesStep from \"../utils/changeStore/nextSearchCyclesStep\";\n\n\nconst ButtonsKruskal5 = props => {\n    //runs next step of the algorithm each interval and stops when phase changes\n    const nextStepHandler = () => {\n        const handler = setInterval(() => {\n            console.log(\"iterating\");\n            const phase = store.getState().phase;\n            if (phase !== \"solving\") {\n                clearInterval(handler);\n            }\n            else {\n                nextStep();\n            }\n        }, props.numberOfEdges > 35 ? 50 : 200);\n    }\n\n    const nextStep = props.cycleSearchMethod === \"unionFind\" ? nextUnionFindStep : nextSearchCyclesStep;\n\n    return (\n        <div className=\"conditional-content\">\n            <div className=\"step-display\">\n                Step 5: Run algorithm\n            </div>\n            <div className=\"button-row\">\n                <button onClick={nextStep} className={\"ui button primary\"}>Next algorithm step</button>\n                <button onClick={nextStepHandler} className={\"ui button primary\"}>Run algorithm</button>\n            </div>\n        </div>\n    );\n}\n\nconst mapStateToProps = state => {\n    return {\n        cycleSearchMethod: state.selectedAlgorithm.cycleSearchMethod,\n        numberOfEdges: state.data.kruskal.edges.length\n    }\n}\n\nexport default connect(mapStateToProps)(ButtonsKruskal5);","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { connect} from \"react-redux\";\nimport changeFormInput from \"../utils/changeStore/changeFormInput\";\nimport { addEdge } from \"../utils/changeStore/editInput\";\n\nconst KruskalForm = props => {\n\n    //sends updated form input to redux store\n    const updateForm = e => {\n        const payload = {...props.form, [e.target.name]: e.target.value};\n        changeFormInput(payload);\n    }\n\n    //updates input data in store and closes window\n    const onSubmit = () => {\n        if ((props.form.startVertex || props.form.startVertex === 0) && (props.form.endVertex || props.form.endVertex === 0) \n            && props.form.startVertex < props.totalVertices && props.form.endVertex < props.totalVertices \n            && props.form.startVertex !== props.form.endVertex) {\n                addEdge(props.form.startVertex, props.form.endVertex);\n        }\n        props.hideForm();\n    }\n\n    return ReactDOM.createPortal(\n        <div className=\"ui dimmer modals visible active\" onClick={props.hideForm}>\n            <div className=\"ui standard modal visible active custom-padding\" onClick={(e) => e.stopPropagation()}>\n                <div className=\"ui form\">\n                <div className=\"form-row\">\n                    <span className=\"button-row-label\" >enter first vertex:</span>\n                    <br />\n                    <input onChange={updateForm} className=\"ui input\" type=\"number\" name=\"startVertex\" value={props.form.startVertex}></input>\n                </div>\n                <div className=\"form-row\">\n                    <span className=\"button-row-label\" >enter second vertex:</span>\n                    <br />\n                    <input onChange={updateForm} type=\"number\" name=\"endVertex\" value={props.form.endVertex}></input>\n                </div>\n                </div>\n                <div className=\"actions\">\n                    <button onClick={onSubmit} className=\"ui button primary\">Submit</button>\n                    <button onClick={props.hideForm} className=\"ui button\">Cancel</button>\n                </div>\n            </div>\n        </div>,\n        document.querySelector(\"#modal\")\n    );\n}\n\nconst mapStateToProps = state => {\n    return {\n        form: state.formInput.kosaraju,\n        totalVertices: state.data.kosaraju.vertices.length\n    };\n}\n\nexport default connect(mapStateToProps)(KruskalForm);","import React from \"react\";\nimport { connect } from \"react-redux\";\n\n\nimport changeInput from \"../utils/changeStore/changeInput\";\nimport { changeEditGraph } from \"../utils/changeStore/editInput\";\nimport { changePhase } from \"../utils/changeStore/changeBasicInfo\";\n\nimport KosarajuForm from \"./KosarajuForm\";\n\n//buttons displayed on opening Kosaraju page\nconst ButtonsKosaraju1 = props => {\n\n    //regulates whether the modal form is displayed for adding edge input\n    const [displayForm, setDisplayForm] = React.useState(false);\n\n    const hideForm = () => {\n        setDisplayForm(false);\n    }\n\n    //renders instructions based on edit graph options the user has selected\n    const renderText = () => {\n        switch (true) {\n            case props.editGraph.dragVertex:\n                return \"(click and drag vertices to change their position)\";\n            case props.editGraph.addVertex:\n                return \"(click on the canvas to add a vertex)\";\n            case props.editGraph.deleteVertex:\n                return \"(click on vertices to remove them)\";\n            case props.editGraph.deleteEdge:\n                return \"(click on two vertices to remove the connecting edge)\"\n            default:\n                return \"\";\n        }\n    }\n\n    return (\n        <div className=\"conditional-content\">\n            {displayForm && <KosarajuForm hideForm ={hideForm}/>}\n            <div className=\"step-display\">\n                Step 1: Edit Graph\n            </div>\n            <div className=\"button-row\">\n                <span className=\"button-row-label\" >choose input:</span>\n                <br />\n                <button onClick={() => changeInput(\"small\")} className={`ui button primary ${props.input === \"small\" && \"selected\"}`}>Small Input</button>\n                <button onClick={() => changeInput(\"large\")} className={`ui button primary ${props.input === \"large\" && \"selected\"}`}>Large Input</button>\n            </div>\n            <div className=\"button-row\">\n                <span className=\"button-row-label\" >edit:</span>\n                <br />\n                <button onClick={() => changeEditGraph(\"dragVertex\")} className={`ui button primary ${props.editGraph.dragVertex && \"selected\"}`}>Move Vertices</button>\n                <button onClick={() => changeEditGraph(\"addVertex\")} className={`ui button primary ${props.editGraph.addVertex && \"selected\"}`}>Add Vertices</button>\n                <button onClick={() => changeEditGraph(\"deleteVertex\")} className={`ui button primary ${props.editGraph.deleteVertex && \"selected\"}`}>Delete Vertices</button>\n                <button onClick={() => setDisplayForm(true)} className=\"ui button primary\">Add Edges</button>\n                <button onClick={() => changeEditGraph(\"deleteEdge\")} className={`ui button primary ${props.editGraph.deleteEdge && \"selected\"}`}>Delete Edges</button>\n            </div>\n            <div className=\"button-row\">\n                <span className=\"button-row-label\" >start algorithm:</span>\n                <br />\n                <button onClick={() => changePhase(\"readyToReverse\")} className=\"ui button primary\">Begin</button>\n            </div>\n            <div className=\"message-display\">\n                {renderText()}\n            </div>\n        </div>\n    );\n}\n\nconst mapStateToProps = state => {\n    return {\n        editGraph: state.editGraph,\n        input: state.data.kosaraju.input,\n    }\n}\n\nexport default connect(mapStateToProps)(ButtonsKosaraju1);\n","import React from \"react\";\n\nimport { changePhase } from \"../utils/changeStore/changeBasicInfo\";\n\n\nconst ButtonsKosaraju2 = () => {\n    return (\n        <div className=\"conditional-content\">\n            <div className=\"step-display\">\n                Step 2: Reverse\n            </div>\n            <div className=\"button-row\">\n                <button onClick={() => changePhase(\"depthFirstSearch\")} className={\"ui button primary\"}>Reverse</button>\n            </div>\n        </div>\n    );\n}\n\nexport default ButtonsKosaraju2;","import { store } from \"../../index.js\";\nimport {\n    updatePhase,\n    updateData,\n    updateAlgorithmProgress\n    } from \"../../actions\";\n\nimport nextUnfoundVertexIndex from \"../miscellaneous/nextUnfoundVertexIndex\";\n\nexport default function nextDepthFirstSearchStep() {\n    const newData = { ...store.getState().data };\n    const { vertices, edges } = newData.kosaraju;\n    const newAlgorithmProgress = { ...store.getState().algorithmProgress }\n    const newVertexStack = [...newAlgorithmProgress.kosaraju.depthFirstSearch.vertexStack];\n    //if the stack is empty, the search is complete and we must move on to another arbitrary unfound vertex in the graph\n    if (newVertexStack.length === 0) {\n        const index = nextUnfoundVertexIndex(vertices);\n        if (index < 0) {\n            store.dispatch(updatePhase(\"readyToUnreverse\"));\n            return;\n        }\n        newVertexStack.push(index);\n        newData.kosaraju.vertices[index].found = true;\n        newData.kosaraju.vertices[index].selected = true;\n    }\n    else {\n        //otherwise, examine all the edges leading into the vertex at the top of our stack (remembering that\n        //the graph is reversed during this stage)\n        const index = newVertexStack[newVertexStack.length - 1];\n        const nextEdges = vertices[index].outEdges.filter(edge => !vertices[edges[edge].start].found);\n        //if there are no new edges that lead to vertices that haven't already been found, we add the vertex to\n        //our ordered list of vertices in store.data.kosaraju.vertexIndex\n        if (nextEdges.length === 0) {\n            newData.kosaraju.vertexIndex.push(index);\n            newData.kosaraju.vertices[index].added = true;\n            newData.kosaraju.vertices[index].selected = false;\n            newVertexStack.pop();\n            if (newVertexStack.length > 0) {\n                newData.kosaraju.vertices[newVertexStack[newVertexStack.length - 1]].selected = true;\n            }\n        }\n        else {\n            //otherwise add the next edge to the graph and add the vertex at the end to the stack\n            newData.kosaraju.edges[nextEdges[0]].found = true;\n            const { start } = newData.kosaraju.edges[nextEdges[0]];\n            if (!vertices[start].found) {\n                newData.kosaraju.vertices[index].selected = false;\n                newData.kosaraju.vertices[start].found = true;\n                newData.kosaraju.vertices[start].selected = true;\n                newVertexStack.push(start);\n            }\n        }\n    }\n    newAlgorithmProgress.kosaraju.depthFirstSearch.vertexStack = newVertexStack;\n    store.dispatch(updateData(newData));\n    store.dispatch(updateAlgorithmProgress(newAlgorithmProgress));\n}","export default function nextUnfoundVertexIndex(vertices) {\n    for (let i = 0; i < vertices.length; i++) {\n        if (!vertices[i].found && !vertices[i].foundAgain) {\n            return i;\n        }\n    }\n    return -1;\n}","import React from \"react\";\n\nimport { store } from \"../index\";\nimport nextDepthFirstSearchStep from \"../utils/changeStore/nextDepthFirstSearchStep\";\n\n\nconst ButtonsKosaraju3 = () => {\n    //runs next step of the algorithm each interval and stops when phase changes\n    const nextStepHandler = () => {\n        const handler = setInterval(() => {\n            console.log(\"iterating\");\n            const phase = store.getState().phase;\n            if (phase !== \"depthFirstSearch\") {\n                clearInterval(handler);\n            }\n            else {\n                nextDepthFirstSearchStep();\n            }\n        }, 100);\n    }\n\n    return (\n        <div className=\"conditional-content\">\n            <div className=\"step-display\">\n                Step 3: Run depth-first search and order the found vertices\n            </div>\n            <div className=\"button-row\">\n                <button onClick={() => nextDepthFirstSearchStep()} className={\"ui button primary\"}>Next search step</button>\n                <button onClick={nextStepHandler} className={\"ui button primary\"}>Run search</button>\n            </div>\n        </div>\n    );\n}\n\nexport default ButtonsKosaraju3;","import React from \"react\";\n\nimport { changePhase } from \"../utils/changeStore/changeBasicInfo\";\n\nconst ButtonsKosaraju4 = () => {\n    return (\n        <div className=\"conditional-content\">\n            <div className=\"step-display\">\n                Step 4: Unreverse\n            </div>\n            <div className=\"button-row\">\n                <button onClick={() => changePhase(\"solving\")} className={\"ui button primary\"}>Uneverse</button>\n            </div>\n        </div>\n    );\n}\n\nexport default ButtonsKosaraju4;","import { store } from \"../../index.js\";\nimport {\n    updatePhase,\n    updateData,\n    updateAlgorithmProgress\n    } from \"../../actions\";\n\nimport nextUnfoundVertexIndexOrdered from \"../miscellaneous/nextUnfoundVertexIndexOrdered\";\n\n//runs nearly identicaly to nextDepthFirstSearch, but uses the store.data.kosaraju.vertexIndex array\n//to find the next starting vertex for each depth first search\nexport default function nextKosarajuStep() {\n    const newData = { ...store.getState().data };\n    const { vertices, edges, vertexIndex } = newData.kosaraju;\n    const newAlgorithmProgress = { ...store.getState().algorithmProgress }\n    const newVertexStack = newAlgorithmProgress.kosaraju.algorithm.vertexStack;\n\n    if (newVertexStack.length === 0) {\n        const index = nextUnfoundVertexIndexOrdered(vertices, vertexIndex);\n        if (index < 0) {\n            store.dispatch(updatePhase(\"completed\"));\n            return;\n        }\n        newVertexStack.push(index);\n        newData.kosaraju.vertices[index].foundAgain = true;\n        newData.kosaraju.vertices[index].selected = true;\n    }\n    else {\n        const index = newVertexStack[newVertexStack.length - 1];\n        const nextEdges = vertices[index].inEdges.filter(edge => !edges[edge].foundAgain);\n        if (nextEdges.length === 0) {\n            newData.kosaraju.vertices[index].selected = false;\n            newVertexStack.pop();\n            if (newVertexStack.length > 0) {\n                newData.kosaraju.vertices[newVertexStack[newVertexStack.length - 1]].selected = true;\n            }\n        }\n        else {\n            newData.kosaraju.edges[nextEdges[0]].foundAgain = true;\n            const { end } = edges[nextEdges[0]];\n            if (!vertices[end].foundAgain) {\n                newData.kosaraju.vertices[index].selected = false;\n                newData.kosaraju.vertices[end].foundAgain = true;\n                newData.kosaraju.vertices[end].selected = true;\n                newVertexStack.push(end);\n            }\n        }\n    }\n    newAlgorithmProgress.kosaraju.algorithm.vertexStack = newVertexStack;\n    store.dispatch(updateData(newData));\n    store.dispatch(updateAlgorithmProgress(newAlgorithmProgress));\n}\n","export default function nextUnfoundVertexIndexOrdered(vertices, vertexIndex) {\n    for (let i = vertexIndex.length - 1; i >= 0; i--) {\n        if (!vertices[vertexIndex[i]].foundAgain) {\n            return vertexIndex[i];\n        }\n    }\n    return -1;\n}","import React from \"react\";\n\nimport { store } from \"../index\";\nimport nextKosarajuStep from \"../utils/changeStore/nextKosarajuStep\";\n\n\nconst ButtonsKosaraju5 = () => {\n    //runs next step of the algorithm each interval and stops when phase changes\n    const nextStepHandler = () => {\n        const handler = setInterval(() => {\n            console.log(\"iterating\");\n            const phase = store.getState().phase;\n            if (phase !== \"solving\") {\n                clearInterval(handler);\n            }\n            else {\n                nextKosarajuStep();\n            }\n        }, 100);\n    }\n\n    return (\n        <div className=\"conditional-content\">\n            <div className=\"step-display\">\n                Step 5: Run algorithm\n            </div>\n            <div className=\"button-row\">\n                <button onClick={() => nextKosarajuStep()} className={\"ui button primary\"}>Next algorithm step</button>\n                <button onClick={nextStepHandler} className={\"ui button primary\"}>Run algorithm</button>\n            </div>\n        </div>\n    );\n}\n\nexport default ButtonsKosaraju5;","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { changePhase } from \"../utils/changeStore/changeBasicInfo\";\nimport changeInput from \"../utils/changeStore/changeInput\";\n\n//displayed on opening the huffman page\nconst ButtonsHuffman1 = props => {\n\n    return (\n        <div className=\"conditional-content\">\n            <div className=\"step-display\">\n                Step 1: Enter input:\n            </div>\n            <form className=\"button-row ui form\">\n                <span className=\"button-row-label\" >enter input (case insensitive, only letters and spaces)</span>\n                <br />\n                <input type=\"text\" onChange={e => changeInput(e.target.value)} value={props.input} />\n            </form>\n            <div className=\"button-row\">\n                <span className=\"button-row-label\" >start algorithm:</span>\n                <br />\n                <button onClick={() => props.input && changePhase(\"heapifying\")} className=\"ui button primary\">Continue</button>\n            </div>\n        </div>\n    );\n}\n\nconst mapStateToProps = state => {\n    // console.log(\"mapStateToProps:\", state.data.huffman);\n    return {\n        input: state.data.huffman.input\n    }\n}\n\nexport default connect(mapStateToProps)(ButtonsHuffman1);","import unfindTreeData from \"./unfindTreeData\";\n\nexport default function findObjInTreeByChars(tree, chars) {\n    unfindTreeData(tree);\n    const localStack = [tree];\n    while (localStack.length > 0) {\n        const stackObj = localStack[localStack.length - 1];\n        if (stackObj.chars === chars) {\n            return stackObj;\n        }\n        if (stackObj.children.length === 0) {\n            stackObj.visited = true;\n            localStack.pop();\n        }\n        else {\n            if (!stackObj.children[0].visited) {\n                localStack.push(stackObj.children[0]);\n            }\n            else if (stackObj.children.length > 1 && !stackObj.children[1].visited) {\n                localStack.push(stackObj.children[1]);\n            }\n            else {\n                stackObj.visited = true;\n                localStack.pop();\n            }\n        }\n    }\n    unfindTreeData(tree);\n    return null;\n}","import { store } from \"../../index.js\";\nimport {\n    updateData,\n    updateAlgorithmProgress\n    } from \"../../actions\";\nimport findObjInTreeByChars from \"../treeFunctions/findObjInTreeByChars\";\nimport unfindTreeData from \"../treeFunctions/unfindTreeData\";\nimport { changePhase } from \"./changeBasicInfo.js\";\n\nexport default function nextHeapifyStep() {\n    const newAlgorithmProgress = { ...store.getState().algorithmProgress };\n    const newData = { ...store.getState().data };\n    const { nodeToBubble, heapStack } = newAlgorithmProgress.huffman.heapify;\n    const { heapTree } = newData.huffman;\n    const newHeapTree = { ...heapTree };\n\n    unfindTreeData(newHeapTree, true);\n    if (heapStack.length === 0) {\n        changePhase(\"solving\");\n        return;\n    }\n    if (nodeToBubble) {\n        //if there is a node to bubble, check to see if it is in the correct position or else move it down the heap\n        const bubbleObj = findObjInTreeByChars(newHeapTree, nodeToBubble.chars);\n        if (bubbleObj.children.length === 0 \n            || (bubbleObj.freq <= bubbleObj.children[0].freq && \n                (bubbleObj.children.length === 1 || bubbleObj.freq <= bubbleObj.children[1].freq))) {\n            newAlgorithmProgress.huffman.heapify.nodeToBubble = null;\n            bubbleObj.selected = true;\n        }\n        else {\n            const minIndex = bubbleObj.children.length === 1 ? 0 : (bubbleObj.children[0].freq <= bubbleObj.children[1].freq ? 0 : 1);\n            const { chars, freq } = bubbleObj;\n            bubbleObj.chars = bubbleObj.children[minIndex].chars;\n            bubbleObj.freq = bubbleObj.children[minIndex].freq;\n            bubbleObj.selected = true;\n            bubbleObj.children[minIndex].chars = chars;\n            bubbleObj.children[minIndex].freq = freq;\n            newAlgorithmProgress.huffman.heapify.nodeToBubble = bubbleObj.children[minIndex];\n        }\n    }\n    else {\n        //otherwise, use the stack to keep traversing the tree and making swaps.\n        //whenever a swap is made, we must bubble the lower node down the tree until it's in the correct\n        //position\n        const stackObj = findObjInTreeByChars(newHeapTree, heapStack[heapStack.length - 1].chars);\n        stackObj.selected = true;\n        if (stackObj.children.length === 0\n            || stackObj.children.length > 0 && stackObj.children.every(child => child.heapified)) {\n                stackObj.heapified = true;\n                newAlgorithmProgress.huffman.heapify.heapStack.pop();\n                if (newAlgorithmProgress.huffman.heapify.heapStack.length === 0) {\n                    changePhase(\"solving\");\n                    return;\n                }\n                else {\n                    const parent = findObjInTreeByChars(\n                        newHeapTree, \n                        newAlgorithmProgress.huffman.heapify.heapStack[newAlgorithmProgress.huffman.heapify.heapStack.length - 1].chars\n                        );\n                    if (parent.freq > stackObj.freq) {\n                        const { chars, freq } = stackObj;\n                        stackObj.chars = parent.chars;\n                        stackObj.freq = parent.freq;\n                        parent.chars = chars;\n                        parent.freq = freq;\n                        newAlgorithmProgress.huffman.heapify.nodeToBubble = stackObj;\n                        newAlgorithmProgress.huffman.heapify.heapStack[newAlgorithmProgress.huffman.heapify.heapStack.length - 1] = parent;\n                    }\n                }\n        }\n        else {\n            const pushIndex = stackObj.children.length > 1 && stackObj.children[0].heapified ? 1 : 0;\n            newAlgorithmProgress.huffman.heapify.heapStack.push(stackObj.children[pushIndex]);\n        }\n    }\n    newData.huffman.heapTree = newHeapTree;\n    store.dispatch(updateData(newData));\n    store.dispatch(updateAlgorithmProgress(newAlgorithmProgress));\n}","import React from \"react\";\n\nimport { store } from \"../index\";\nimport nextHeapifyStep from \"../utils/changeStore/nextHeapifyStep\";\n\n\nconst ButtonsHuffman2 = () => {\n\n    //runs next step of the algorithm each interval and stops when phase changes\n    const nextStepHandler = () => {\n        const handler = setInterval(() => {\n            const phase = store.getState().phase;\n            if (phase !== \"heapifying\") {\n                clearInterval(handler);\n            }\n            else {\n                nextHeapifyStep();\n            }\n        }, 100);\n    }\n\n    return (\n        <div className=\"conditional-content\">\n            <div className=\"step-display\">\n                Step 2: Heapify\n            </div>\n            <div className=\"button-row\">\n                <button onClick={() => nextHeapifyStep()} className={\"ui button primary\"}>Next heapify step</button>\n                <button onClick={nextStepHandler} className={\"ui button primary\"}>Run heapify</button>\n            </div>\n        </div>\n    );\n}\n\nexport default ButtonsHuffman2;","import unfindTreeData from \"./unfindTreeData\";\n\nexport default function findObjInTreeByChars(tree, chars) {\n    unfindTreeData(tree);\n    const localStack = [tree];\n    while (localStack.length > 0) {\n        const stackObj = localStack[localStack.length - 1];\n        if (stackObj.children.length === 0) {\n            stackObj.visited = true;\n            localStack.pop();\n        }\n        else {\n            if (!stackObj.children[0].visited) {\n                if (stackObj.children[0].chars === chars) {\n                    return stackObj;\n                }\n                else {\n                    localStack.push(stackObj.children[0]);\n                }\n            }\n            else if (stackObj.children.length > 1 && !stackObj.children[1].visited) {\n                if (stackObj.children[1].chars === chars) {\n                    return stackObj;\n                }\n                else {\n                    localStack.push(stackObj.children[1]);\n                }\n            }\n            else {\n                stackObj.visited = true;\n                localStack.pop();\n            }\n        }\n    }\n    unfindTreeData(tree);\n    return null;\n}","import { store } from \"../../index.js\";\nimport {\n    updatePhase,\n    updateData,\n    updateAlgorithmProgress\n    } from \"../../actions\";\nimport unfindTreeData from \"../treeFunctions/unfindTreeData\";\nimport findObjInTreeByChars from \"../treeFunctions/findObjInTreeByChars\";\nimport findParentOf from \"../treeFunctions/findParentOf\";\nimport appendNodeToHeap from \"../treeFunctions/appendNodeToHeap\";\nimport TreeNode from \"../dataClasses/TreeNode\";\nimport { getNewEncodingTree, getNewChart} from \"./changeHuffmanDataOnInputChange\";\n\nexport default function nextHuffmanStep() {\n    const newAlgorithmProgress = { ...store.getState().algorithmProgress };\n    const newData = { ...store.getState().data };\n    const { nodeToRemove, nodeToInsert } = newAlgorithmProgress.huffman.algorithm;\n    const { frequencies, heapTree, } = newData.huffman;\n    let newHeapTree = { ...heapTree };\n    unfindTreeData(newHeapTree, true);\n    if (nodeToRemove) {\n        //if there is a node to remove, keep bubbling it down the tree until it's a leaf and then remove it\n        const stackObj = findObjInTreeByChars(newHeapTree, nodeToRemove.chars);\n        if (stackObj.children.length === 0) {\n            const parent = findParentOf(newHeapTree, stackObj.chars);\n            if (parent) {\n                if (parent.children[0].chars === stackObj.chars) {\n                    parent.children.shift();\n                }\n                else {\n                    parent.children.pop();\n                }\n            }\n            else {\n                newHeapTree = null;\n            }\n            //once a node is removed, add it to our list of extracted minimum frequency values\n            newAlgorithmProgress.huffman.algorithm.extractedMins.push({chars: stackObj.chars, freq: stackObj.freq});\n            if (newAlgorithmProgress.huffman.algorithm.extractedMins.length < 2) {\n                newAlgorithmProgress.huffman.algorithm.nodeToRemove = newHeapTree;\n                newHeapTree.selected = true;\n                //if there is only one extracted minimum value, retrive the next by setting the current top of the tree\n                //as the next node to remove\n            }\n            else {\n                //if there are now two extracted minimum values, create a new node with both nodes as children\n                //the nodes stored in the frequencies array will contain all previous children of the extracted\n                //minimum values, which we will need for the encoding tree\n                let newChild1;\n                let newChild2;\n                frequencies.forEach(freqObj => {\n                    if (freqObj.chars === newAlgorithmProgress.huffman.algorithm.extractedMins[0].chars) {\n                        newChild1 = freqObj;\n                    }\n                    if (freqObj.chars === newAlgorithmProgress.huffman.algorithm.extractedMins[1].chars) {\n                        newChild2 = freqObj;\n                    }\n                });\n                //remove the extracted nodes from the frequencies array\n                newData.huffman.frequencies = frequencies.filter(freqObj => {\n                    return (\n                        freqObj.chars !== newAlgorithmProgress.huffman.algorithm.extractedMins[0].chars \n                        && freqObj.chars !== newAlgorithmProgress.huffman.algorithm.extractedMins[1].chars);\n                });\n                newAlgorithmProgress.huffman.algorithm.nodeToRemove = null;\n                const newChars = newAlgorithmProgress.huffman.algorithm.extractedMins[0].chars + newAlgorithmProgress.huffman.algorithm.extractedMins[1].chars;\n                const newFreq = newAlgorithmProgress.huffman.algorithm.extractedMins[0].freq + newAlgorithmProgress.huffman.algorithm.extractedMins[1].freq;\n                const newTreeObj = new TreeNode(newChars, newFreq);\n                const newHeapObj = new TreeNode(newChars, newFreq);\n                //the new node we create will be a single node for the heap tree and a full branch consisting of \n                //all previous children for the encoding tree\n                newTreeObj.assignChild(newChild1);                \n                newTreeObj.assignChild(newChild2);\n                newData.huffman.frequencies.push(newTreeObj);\n                newData.huffman.encodingTree = getNewEncodingTree(newData.huffman.frequencies);\n                newData.huffman.chart = getNewChart(newData.huffman.encodingTree);\n                //set the new node as the node to insert back into the heap\n                newAlgorithmProgress.huffman.algorithm.nodeToInsert = newHeapObj;\n                if (newData.huffman.frequencies.length === 1) {\n                    store.dispatch(updatePhase(\"completed\"));\n                }\n            }\n        }\n        else {\n            //bubble the node to remove down the heap tree\n            const minIndex = (stackObj.children[1] && stackObj.children[1].freq < stackObj.children[0].freq) ? 1 : 0;\n            const { chars, freq } = stackObj;\n            stackObj.chars = stackObj.children[minIndex].chars;\n            stackObj.freq = stackObj.children[minIndex].freq;\n            stackObj.children[minIndex].chars = chars;\n            stackObj.children[minIndex].freq = freq;\n            stackObj.children[minIndex].selected = true;\n            newAlgorithmProgress.huffman.algorithm.nodeToRemove = stackObj.children[minIndex];\n        }\n    }\n    else if (nodeToInsert) {\n        //if there is a node to insert, bubble it up the heap tree until it's in the correct position\n        const stackObj = findObjInTreeByChars(newHeapTree, nodeToInsert.chars);\n        if (stackObj) {\n            stackObj.selected = true;\n            const parent = findParentOf(newHeapTree, nodeToInsert.chars);\n            if (parent && parent.freq > stackObj.freq) {\n                const { chars, freq } = stackObj;\n                    stackObj.chars = parent.chars;\n                    stackObj.freq = parent.freq;\n                    parent.chars = chars;\n                    parent.freq = freq;\n                    parent.selected = true;\n                    newAlgorithmProgress.huffman.algorithm.nodeToInsert = parent;\n            }\n            else  {\n                newHeapTree.selected = true;\n                newAlgorithmProgress.huffman.algorithm.nodeToRemove = newHeapTree;\n                newAlgorithmProgress.huffman.algorithm.nodeToInsert = null;\n                newAlgorithmProgress.huffman.algorithm.extractedMins = [];\n            }\n        }\n        else {\n            nodeToInsert.selected = true;\n            newHeapTree = appendNodeToHeap(newHeapTree, nodeToInsert);\n        }\n    }\n    newData.huffman.heapTree = newHeapTree;\n    store.dispatch(updateData(newData));\n    store.dispatch(updateAlgorithmProgress(newAlgorithmProgress));\n}\n","import React from \"react\";\n\nimport { store } from \"../index\";\nimport nextHuffmanStep from \"../utils/changeStore/nextHuffmanStep\";\n\n\nconst ButtonsHuffman3 = () => {\n\n    //runs next step of the algorithm each interval and stops when phase changes\n    const nextStepHandler = () => {\n        const handler = setInterval(() => {\n            console.log(\"iterating\");\n            const phase = store.getState().phase;\n            if (phase !== \"solving\") {\n                clearInterval(handler);\n            }\n            else {\n                nextHuffmanStep();\n            }\n        }, 100);\n    }\n\n    return (\n        <div className=\"conditional-content\">\n            <div className=\"step-display\">\n                Step 3: Run algorithm\n            </div>\n            <div className=\"button-row\">\n                <button onClick={() => nextHuffmanStep()} className={\"ui button primary\"}>Next algorithm step</button>\n                <button onClick={nextStepHandler} className={\"ui button primary\"}>Run algorithm</button>\n            </div>\n        </div>\n    );\n}\n\nexport default ButtonsHuffman3;","import React from \"react\";\n\n\n\nconst ButtonsCompleted = () => {\n\n    return (\n        <div className=\"conditional-content\">\n            <div className=\"step-display\">\n                Algorithm complete\n            </div>\n        </div>\n    );\n}\n\nexport default ButtonsCompleted;","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nimport \"./UserInput.css\";\nimport { callReset, changeSelectedAlgorithmType } from \"../utils/changeStore/changeBasicInfo\";\nimport changeInput from \"../utils/changeStore/changeInput\";\n\nimport ButtonsKruskal1 from \"./ButtonsKruskal1\";\nimport ButtonsKruskal2 from \"./ButtonsKruskal2\";\nimport ButtonsKruskal3 from \"./ButtonsKruskal3\";\nimport ButtonsKruskal4 from \"./ButtonsKruskal4\";\nimport ButtonsKruskal5 from \"./ButtonsKruskal5\";\nimport ButtonsKosaraju1 from \"./ButtonsKosaraju1\";\nimport ButtonsKosaraju2 from \"./ButtonsKosaraju2\";\nimport ButtonsKosaraju3 from \"./ButtonsKosaraju3\";\nimport ButtonsKosaraju4 from \"./ButtonsKosaraju4\";\nimport ButtonsKosaraju5 from \"./ButtonsKosaraju5\";\nimport ButtonsHuffman1 from \"./ButtonsHuffman1\";\nimport ButtonsHuffman2 from \"./ButtonsHuffman2\";\nimport ButtonsHuffman3 from \"./ButtonsHuffman3\";\nimport ButtonsCompleted from \"./ButtonsCompleted\";\n\nconst UserInput = props => {\n\n    const resetPage = () => {\n        window.location.reload()\n        const { type } = props;\n        callReset();\n        changeSelectedAlgorithmType(type);\n        if (type === \"kruskal\" || type ===\"kosaraju\") {\n            changeInput(\"small\")\n        }\n        else {\n            changeInput(\"\");\n        }\n    }\n\n    //determines which content to render based on algorithm selected and phase\n    const renderButtons = (type, phase) => {\n        if (type === \"kruskal\") {\n            switch (phase) {\n                case \"notStarted\":\n                    return <ButtonsKruskal1 />;\n                case \"choosingSort\":\n                    return <ButtonsKruskal2 />;\n                case \"sorting\":\n                    return <ButtonsKruskal3 />;\n                case \"choosingCycleSearchMethod\":\n                    return <ButtonsKruskal4 />;\n                case \"solving\":\n                    return <ButtonsKruskal5 />;\n                case \"completed\":\n                    return <ButtonsCompleted />;\n                default:\n                    return;\n            }\n        }\n        if (type === \"kosaraju\") {\n            switch (phase) {\n                case \"notStarted\":\n                    return <ButtonsKosaraju1 />;\n                case \"readyToReverse\":\n                    return <ButtonsKosaraju2 />;\n                case \"depthFirstSearch\":\n                    return <ButtonsKosaraju3 />;\n                case \"readyToUnreverse\":\n                    return <ButtonsKosaraju4 />;\n                case \"solving\":\n                    return <ButtonsKosaraju5 />;\n                case \"completed\":\n                    return <ButtonsCompleted />\n                default:\n                    return;\n            }\n        }\n        if (type === \"huffman\") {\n            switch (phase) {\n                case \"notStarted\":\n                    return <ButtonsHuffman1 />;\n                case \"heapifying\":\n                    return <ButtonsHuffman2 />;\n                case \"solving\":\n                    return <ButtonsHuffman3 />;\n                case \"completed\":\n                    return <ButtonsCompleted />\n                default:\n                    return;\n            }\n        }\n    }\n\n    return (\n        <div className={props.type === \"huffman\" ? \"user-input-wrapper-huffman\" : \"user-input-wrapper\"}>\n            <div className={props.type === \"huffman\" ? \"user-input-huffman\" : \"user-input\"}>\n                {renderButtons(props.type, props.phase)}\n                <div className=\"permanent-content\">\n                    <div className=\"parmanent-buttons-wrapper\">\n                        <button onClick={resetPage} className=\"ui secondary button\">Reset</button>\n                        <Link to=\"/about\" className=\"ui secondary button\">Explanation</Link>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        type: state.selectedAlgorithm.type, \n        phase: state.phase\n    };\n}\n\nexport default connect(mapStateToProps)(UserInput);","export default class SketchVertex {\n    constructor(x, y, displayColor, index) {\n        this.x = x;\n        this.y = y;\n        this.displayColor = displayColor;\n        this.index = index;\n    }\n\n    renderCircle = (p, diam, borderColor=255, fillColor=null) => {\n        const textSize = diam / 1.8;\n        p.fill(fillColor ? fillColor : this.displayColor);\n        p.stroke(borderColor);\n        p.strokeWeight(1)\n        p.circle(this.x, this.y, diam);\n        p.fill(borderColor);\n        p.noStroke();\n        p.textSize(textSize);\n        p.textAlign(p.CENTER)\n        p.text(`${this.index}`, this.x, this.y + textSize / 3);\n    }\n\n    sendData = (p, diam) => {\n        if (p.dist(this.x, this.y, p.mouseX, p.mouseY) <= diam / 2) {\n            return {x: this.x / p.width, y: this.y / p.height, index: this.index}\n        }\n        else {\n            return null;\n        }\n    }\n}","import drawEdges from \"../utils/sketchFunctions/drawEdgesKruskalGraph\";\nimport drawVertices from \"../utils/sketchFunctions/drawVerticesKruskal\";\nimport SketchVertex from \"../utils/dataClasses/SketchVertex\";\n\nimport { addVertex, deleteEdgeHandler, deleteVertex, changeVertex } from \"../utils/changeStore/editInput\";\n\nconst DIAM = 20;\n\nexport default function kruskalGraphSketch(p){\n    let draw = false;\n    let canvasWidth = 800;\n    let canvasHeight = 500;\n    let edges = [];\n    let vertices = [];\n    let type = \"unionFind\";\n    let editGraph = {};\n    let responsiveVertices = [];\n    let selectedIndex = null;\n    const deleteEdge = deleteEdgeHandler();\n\n    p.myCustomRedrawAccordingToNewPropsHandler = (newProps) => {\n          edges = newProps.edges;\n          vertices = newProps.vertices;\n          type = newProps.type;\n          editGraph = newProps.editGraph;\n          responsiveVertices = getResponsiveVertices(canvasWidth, canvasHeight, vertices, type === \"unionFind\");\n          draw = true;\n      }\n\n    \n    p.setup = () => {\n        p.createCanvas(canvasWidth, canvasHeight);\n        p.noStroke();\n    }\n\n\n\n    p.draw = () => {\n        if (draw) {\n            p.background(\"black\");\n            drawEdges(p, edges, vertices);\n            drawVertices(p, responsiveVertices, DIAM);\n            draw = false;\n        }\n    }\n    //assigns the selectedIndex variable to any vertex whose display was clicked\n    p.mousePressed = () => {\n        if (editGraph.dragVertex) {\n            responsiveVertices.forEach(vertex => {\n                const vertexData = vertex.sendData(p, DIAM);\n                if (vertexData) {\n                    selectedIndex = vertexData.index;\n                }\n            });\n        }\n    }\n    //determines if vertex was clicked and in which ways the graph is being edited\n    p.mouseClicked = () => {\n        if (editGraph.addVertex) {\n            if (p.mouseX >= 0 && p.mouseX <= p.width && p.mouseY >= 0 && p.mouseY <= p.height) {\n                addVertex(p.mouseX / p.width, p.mouseY / p.height);\n            }\n        }\n        else {\n            responsiveVertices.forEach(vertex => {\n                const vertexData = vertex.sendData(p, DIAM);\n                if (vertexData) {\n                    if (editGraph.deleteVertex) {\n                        deleteVertex(vertexData.index);\n                    }\n                    if (editGraph.deleteEdge) {\n                        deleteEdge(vertexData.index);\n                    }\n                }\n            });\n        }\n    }\n\n    p.mouseDragged = () => {\n        if ((selectedIndex || selectedIndex === 0) && editGraph.dragVertex && p.mouseX >= 0 && p.mouseX <= p.width && p.mouseY >= 0 && p.mouseY <= p.height) {\n            changeVertex(selectedIndex, p.mouseX / p.width, p.mouseY / p.height)\n        }\n    }\n\n    p.mouseReleased = () => {\n        selectedIndex = null;\n    }\n}\n//adds input vertices to an array of custom objects with methods that return vertex data when the display is clicked\nfunction getResponsiveVertices(width, height, vertices, showColor) {\n\n    const responsiveVertices = [];\n    vertices.forEach((vertex, index) => {\n        const color = showColor ? `rgb(${vertex.displayColor[0]},${vertex.displayColor[1]},${vertex.displayColor[2]})` : 0;\n        const newResponsiveVertex = new SketchVertex(vertex.x * width, vertex.y * height, color, index);\n        responsiveVertices.push(newResponsiveVertex);\n    });\n    return responsiveVertices;\n}","const LINE_AREA = 400;\nexport default function drawEdges(p, edges, vertices) {\n    p.stroke(255);\n    for (let i = 0; i < edges.length; i++) {\n        if (vertices[edges[i].vertex1].displayColor === vertices[edges[i].vertex2].displayColor) {\n            p.stroke(vertices[edges[i].vertex1].displayColor);\n        }\n        if (edges[i].flash) {\n            p.stroke(\"goldenrod\");\n        }\n\n        if (edges[i].flash || edges[i].displayGraph) {\n            const lineLength = p.dist(\n                p.width * vertices[edges[i].vertex1].x, \n                p.height * vertices[edges[i].vertex1].y, \n                p.width * vertices[edges[i].vertex2].x, \n                p.height * vertices[edges[i].vertex2].y\n            );\n            p.strokeWeight(LINE_AREA  / (Math.pow(lineLength, 0.8) * Math.sqrt(edges[i].cost)));\n            p.line(\n                p.width * vertices[edges[i].vertex1].x, \n                p.height * vertices[edges[i].vertex1].y, \n                p.width * vertices[edges[i].vertex2].x, \n                p.height * vertices[edges[i].vertex2].y\n            );\n        }\n        p.stroke(255);\n    }\n}","export default function drawVertices(p, responsiveVertices, diam) {\n    responsiveVertices.forEach(responsiveVertex => {\n        responsiveVertex.renderCircle(p, diam);\n    });\n}","import React from \"react\";\nimport P5Wrapper from 'react-p5-wrapper';\nimport { connect } from \"react-redux\";\nimport kruskalGraphSketch from '../sketches/kruskalGraphSketch';\nimport { store } from \"../index\";\n\nclass KruskalGraphHandler extends React.Component {   \n    render() {\n        return (\n            <P5Wrapper \n                sketch={kruskalGraphSketch} \n                vertices={this.props.vertices}\n                edges={this.props.edges}\n                type={this.props.type}\n                editGraph={this.props.editGraph}\n            />\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        edges: [ ...state.data.kruskal.edges ],\n        vertices: [ ...state.data.kruskal.vertices ],\n        type: state.selectedAlgorithm.cycleSearchMethod,\n        editGraph: state.editGraph\n    }\n}\n\nexport default connect(mapStateToProps)(KruskalGraphHandler);","import drawEdges from \"../utils/sketchFunctions/drawEdgesKruskalSort\";\n\nconst TEXT_SIZE = 14;\n\nexport default function graphSketch(p){\n    let draw = false;\n    let canvasWidth = 200;\n    let canvasHeight = 500;\n    let edges = [];\n\n    p.myCustomRedrawAccordingToNewPropsHandler = (newProps) => {\n          edges = newProps.edges;\n          draw = true;\n      }\n\n    \n    p.setup = () => {\n        p.textSize(TEXT_SIZE);\n        p.createCanvas(canvasWidth, canvasHeight);\n        p.noStroke();\n    }\n\n\n\n    p.draw = () => {\n        if (draw) {\n            p.background(\"black\");\n            drawEdges(p, edges);\n            draw = false;\n        }\n    }\n}","const BAR_WIDTH = 4;\nconst MARGIN = 10;\n\nexport default function drawEdges(p, edges) {\n    const unitHeight = (p.height - MARGIN * 2) / edges.length;\n    const unitWidth = (p.width - MARGIN * 2);\n    let max = 0;\n    edges.forEach(edge => {\n        if (edge.cost > max) {\n            max = edge.cost;\n        }\n    });\n    for (let i = 0; i < edges.length; i++) {\n        if (edges[i].displaySort) {\n            let color = edges[i].sortDisplayColor || 255;\n            if (edges[i].flash) {\n                color = \"goldenrod\";\n            }\n            p.fill(color);\n            p.rect(\n                MARGIN,\n                MARGIN + unitHeight * (i + 0.5) - BAR_WIDTH / 2, \n                unitWidth * edges[i].cost / max, \n                BAR_WIDTH);\n        }\n    }\n}","import React from \"react\";\nimport P5Wrapper from 'react-p5-wrapper';\nimport { connect } from \"react-redux\";\nimport kruskalSortSketch from '../sketches/kruskalSortSketch';\n\nclass KruskalSortHandler extends React.Component {\n\n    render() {\n        return (\n            <P5Wrapper \n                sketch={kruskalSortSketch} \n                edges={this.props.edges}\n            />\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        edges: [...state.data.kruskal.edges],\n    }\n}\n\nexport default connect(mapStateToProps)(KruskalSortHandler);","import React from \"react\";\n\nimport { callReset, changeSelectedAlgorithmType } from \"../utils/changeStore/changeBasicInfo\";\nimport changeInput from \"../utils/changeStore/changeInput\";\nimport Header from \"./Header\";\nimport UserInput from \"./UserInput\";\nimport KruskalGraphHandler from \"./KruskalGraphHandler\";\nimport KruskalSortHandler from \"./KruskalSortHandler\";\n\nclass Kruskal extends React.Component {\n    componentDidMount() {\n        //resets the redux store when page is accessed\n        callReset();\n        changeSelectedAlgorithmType(\"kruskal\");\n        changeInput(\"small\");\n    }\n\n    render() {\n        return (\n            <div>\n                <Header />\n                <UserInput />\n                <div style={{display: \"flex\", justifyContent: \"center\"}}>\n                    <KruskalGraphHandler  />\n                    <KruskalSortHandler  />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Kruskal;","import drawVertices from \"../utils/sketchFunctions/drawVerticesKosarajuIndex\";\nimport SketchVertex from \"../utils/dataClasses/SketchVertex\";\n\nconst DIAM = 20;\n\nexport default function kosarajuGraphSketch(p){\n    let draw = false;\n    let canvasWidth = 1000;\n    let canvasHeight = 50;\n    let vertices = [];\n    let vertexIndex = [];\n    let responsiveVertices = [];\n    let phase = \"notStarted\";\n\n    p.myCustomRedrawAccordingToNewPropsHandler = (newProps) => {\n          vertices = newProps.vertices;\n          vertexIndex = newProps.vertexIndex;\n          phase = newProps.phase;\n          responsiveVertices = getResponsiveVerticesKosarajuIndex(canvasWidth, canvasHeight, vertices, vertexIndex);\n          draw = true;\n      }\n\n    \n    p.setup = () => {\n        p.createCanvas(canvasWidth, canvasHeight);\n        p.noStroke();\n    }\n\n\n\n    p.draw = () => {\n        if (draw) {\n            p.background(\"black\");\n            const defaultColor = (phase === \"notStarted\" || phase === \"readyToReverse\") ? 255 : 63;\n            drawVertices(p, vertices, responsiveVertices, DIAM, defaultColor);\n            draw = false;\n        }\n    }\n}\n\nfunction getResponsiveVerticesKosarajuIndex(width, height, vertices, vertexIndex) {\n\n    const responsiveVertices = [];\n    for (let i = 0; i < vertexIndex.length; i++) {\n        const newResponsiveVertex = new SketchVertex((i + 0.5) * width / vertices.length, height / 2, 0, vertexIndex[i]);\n        responsiveVertices.push(newResponsiveVertex);\n    }\n    return responsiveVertices;\n}","export default function drawVertices(p, vertices, responsiveVertices, diam, defaultColor) {\n    for (let i = 0; i < responsiveVertices.length; i++) {\n        let color = (vertices[responsiveVertices[i].index].added && vertices[responsiveVertices[i].index].found) ? \"goldenrod\" : (vertices[responsiveVertices[i].index].found ? \"white\" : defaultColor);\n        let fillColor = null;\n        if (vertices[responsiveVertices[i].index].displayColor && vertices[responsiveVertices[i].index].foundAgain) {\n            color = 255;\n            fillColor = vertices[responsiveVertices[i].index].displayColor;\n        }\n        responsiveVertices[i].renderCircle(p, vertices[responsiveVertices[i].index].selected ? diam * 1.5 : diam, color, fillColor);\n    }\n}","import React from \"react\";\nimport P5Wrapper from 'react-p5-wrapper';\nimport { connect } from \"react-redux\";\nimport kosarajuIndexSketch from '../sketches/kosarajuIndexSketch';\n\nclass KosarajuIndexHandler extends React.Component {   \n    render() {\n        return (\n            <P5Wrapper \n                sketch={kosarajuIndexSketch} \n                vertices={this.props.vertices}\n                vertexIndex={this.props.vertexIndex}\n                phase={this.props.phase}\n            />\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        vertexIndex: [ ...state.data.kosaraju.vertexIndex ],\n        vertices: [...state.data.kosaraju.vertices],\n        phase: state.phase\n    }\n}\n\nexport default connect(mapStateToProps)(KosarajuIndexHandler);","const ARROWHEAD_LENGTH = 10;\n\nexport default function drawEdges(p, edges, vertices, diam, defaultColor, reverse) {\n    for (let i = 0; i < edges.length; i++) {\n        const { start, end } = edges[i];\n        let color = (vertices[start].added && vertices[end].added && edges[i].found) ? \"goldenrod\" : (edges[i].found ? \"white\" : defaultColor);\n        if (vertices[start].displayColor === vertices[end].displayColor && edges[i].foundAgain) {\n            color = vertices[start].displayColor;\n        } \n        const lineCoords = {\n            [reverse ? \"xEnd\" : \"xStart\"]: vertices[start].x * p.width,\n            [reverse ? \"yEnd\" : \"yStart\"]: vertices[start].y * p.height,\n            [reverse ? \"xStart\" : \"xEnd\"]: vertices[end].x * p.width,\n            [reverse ? \"yStart\" : \"yEnd\"]: vertices[end].y * p.height\n        };\n        p.stroke(color);\n        p.strokeWeight(2);\n        p.line(lineCoords.xStart, lineCoords.yStart, lineCoords.xEnd, lineCoords.yEnd);\n        p.fill(color);\n        renderArrowHead(p, lineCoords, vertices[reverse ? start : end].selected ? diam * 1.5 : diam);\n    }\n}\n\nconst renderArrowHead = (p, lineCoords, diam) => {\n    const { xStart, yStart, xEnd, yEnd} = lineCoords;\n    const theta = Math.atan((yEnd - yStart) / (xEnd - xStart));\n    const handleNegative = xEnd >= xStart ? 1 : -1;\n    const x1 = xEnd - (Math.cos(theta) * handleNegative * diam / 2);\n    const y1 = yEnd - (Math.sin(theta) * handleNegative * diam / 2);\n    const x2 = x1 - (Math.cos(theta + (Math.PI / 6)) * handleNegative * ARROWHEAD_LENGTH);\n    const y2 = y1 - (Math.sin(theta + (Math.PI / 6)) * handleNegative * ARROWHEAD_LENGTH);\n    const x3 = x1 - (Math.cos(theta - (Math.PI / 6)) * handleNegative * ARROWHEAD_LENGTH);\n    const y3 = y1 - (Math.sin(theta - (Math.PI / 6)) * handleNegative * ARROWHEAD_LENGTH);\n    p.noStroke();\n    p.beginShape();\n    p.vertex(x1, y1);\n    p.vertex(x2, y2);\n    p.vertex(x3, y3);\n    p.endShape(p.CLOSE);\n}","import drawEdges from \"../utils/sketchFunctions/drawEdgesKosaraju\";\nimport drawVertices from \"../utils/sketchFunctions/drawVerticesKosarajuGraph\";\nimport SketchVertex from \"../utils/dataClasses/SketchVertex\";\n\nimport { addVertex, deleteEdgeHandler, deleteVertex, changeVertex } from \"../utils/changeStore/editInput\";\n\nconst DIAM = 20;\n\nexport default function kosarajuGraphSketch(p){\n    let draw = false;\n    let canvasWidth = 1000;\n    let canvasHeight = 450;\n    let edges = [];\n    let vertices = [];\n    let editGraph = {};\n    let responsiveVertices = [];\n    let selectedIndex = null;\n    let phase = \"notStarted\";\n    const deleteEdge = deleteEdgeHandler();\n\n    p.myCustomRedrawAccordingToNewPropsHandler = (newProps) => {\n          edges = newProps.edges;\n          vertices = newProps.vertices;\n          editGraph = newProps.editGraph;\n          phase = newProps.phase;\n          responsiveVertices = getResponsiveVerticesKosaraju(canvasWidth, canvasHeight, vertices);\n          draw = true;\n      }\n\n    \n    p.setup = () => {\n        p.createCanvas(canvasWidth, canvasHeight);\n        p.noStroke();\n    }\n\n\n\n    p.draw = () => {\n        if (draw) {\n            p.background(\"black\");\n            const reverse = (phase === \"depthFirstSearch\" || phase === \"readyToUnreverse\")\n            const defaultColor = (phase === \"notStarted\" || phase === \"readyToReverse\") ? 255 : 63;\n            drawEdges(p, edges, vertices, DIAM, defaultColor, reverse);\n            drawVertices(p, vertices, responsiveVertices, DIAM, defaultColor);\n            draw = false;\n        }\n    }\n    //assigns the selectedIndex variable to any vertex whose display was clicked\n    p.mousePressed = () => {\n        if (editGraph.dragVertex) {\n            responsiveVertices.forEach(vertex => {\n                const vertexData = vertex.sendData(p, DIAM);\n                if (vertexData) {\n                    selectedIndex = vertexData.index;\n                }\n            });\n        }\n    }\n\n    //determines if vertex was clicked and in which ways the graph is being edited\n    p.mouseClicked = () => {\n        if (editGraph.addVertex) {\n            if (p.mouseX >= 0 && p.mouseX <= p.width && p.mouseY >= 0 && p.mouseY <= p.height) {\n                addVertex(p.mouseX / p.width, p.mouseY / p.height);\n            }\n        }\n        else {\n            responsiveVertices.forEach(vertex => {\n                const vertexData = vertex.sendData(p, DIAM);\n                if (vertexData) {\n                    if (editGraph.deleteVertex) {\n                        deleteVertex(vertexData.index);\n                    }\n                    if (editGraph.deleteEdge) {\n                        deleteEdge(vertexData.index);\n                    }\n                }\n            });\n        }\n    }\n\n    p.mouseDragged = () => {\n        if ((selectedIndex || selectedIndex === 0) && editGraph.dragVertex && p.mouseX >= 0 && p.mouseX <= p.width && p.mouseY >= 0 && p.mouseY <= p.height) {\n            changeVertex(selectedIndex, p.mouseX / p.width, p.mouseY / p.height)\n        }\n    }\n\n    p.mouseReleased = () => {\n        selectedIndex = null;\n    }\n}\n\n//adds input vertices to an array of custom objects with methods that return vertex data when the display is clicked\nfunction getResponsiveVerticesKosaraju(width, height, vertices) {\n    const responsiveVertices = [];\n    vertices.forEach((vertex, index) => {\n        const newResponsiveVertex = new SketchVertex(vertex.x * width, vertex.y * height, 0, index);\n        responsiveVertices.push(newResponsiveVertex);\n    });\n    return responsiveVertices;\n}","export default function drawVertices(p, vertices, responsiveVertices, diam, defaultColor) {\n    for (let i = 0; i < vertices.length; i++) {\n        let color = (vertices[i].added && vertices[i].found) ? \"goldenrod\" : (vertices[i].found ? \"white\" : defaultColor);\n        let fillColor = null;\n        if (vertices[i].displayColor && vertices[i].foundAgain) {\n            color = 255;\n            fillColor = vertices[i].displayColor;\n        }\n        responsiveVertices[i].renderCircle(p, vertices[i].selected ? diam * 1.5 : diam, color, fillColor);\n    }\n}","import React from \"react\";\nimport P5Wrapper from 'react-p5-wrapper';\nimport { connect } from \"react-redux\";\nimport kosarajuGraphSketch from '../sketches/kosarajuGraphSketch';\n\nclass KosarajuGraphHandler extends React.Component {  \n    render() {\n        return (\n            <P5Wrapper \n                sketch={kosarajuGraphSketch} \n                vertices={this.props.vertices}\n                edges={this.props.edges}\n                editGraph={this.props.editGraph}\n                phase={this.props.phase}\n            />\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        edges: [ ...state.data.kosaraju.edges ],\n        vertices: [ ...state.data.kosaraju.vertices ],\n        editGraph: state.editGraph,\n        phase: state.phase\n    }\n}\n\nexport default connect(mapStateToProps)(KosarajuGraphHandler);","import React from \"react\";\nimport { callReset, changeSelectedAlgorithmType } from \"../utils/changeStore/changeBasicInfo\";\nimport changeInput from \"../utils/changeStore/changeInput\";\n\nimport Header from \"./Header\";\nimport UserInput from \"./UserInput\";\nimport KosarajuIndexHandler from \"./KosarajuIndexHandler\";\nimport KosarajuGraphHandler from \"./KosarajuGraphHandler\";\n\nclass Kosaraju extends React.Component {\n    componentDidMount() {\n        //resets the redux store when page is accessed\n        callReset();\n        changeSelectedAlgorithmType(\"kosaraju\");\n        changeInput(\"small\")\n    }\n    render() {\n        return (\n            <div>\n                <Header />\n                <UserInput />\n                <div style={{display: \"flex\", justifyContent: \"center\"}}>\n                    <div style={{backgroundColor: \"black\"}}>\n                        <div style={{display: \"flex\", justifyContent: \"center\", margin: \"0\"}}>\n                            <KosarajuIndexHandler />\n                        </div>\n                        <div style={{display: \"flex\", justifyContent: \"center\", margin: \"0\"}}>\n                            <KosarajuGraphHandler />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Kosaraju;","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nclass HuffmanChartHandler extends React.Component {\n\n    state = {\n        totalBits: 0\n    }\n\n    //computes the new total bits to display when store.data.huffman.chart changes\n    componentDidUpdate = (newProps) => {\n        let newTotalBits = 0;\n        newProps.chart.forEach(row => {\n            newTotalBits += row.freq * row.code.length;\n        });\n        if (newTotalBits !== this.state.totalBits) {\n            this.setState({totalBits: newTotalBits});\n        }\n    }\n    render() {\n        return (\n            <div>\n                <strong>TOTAL BITS: {this.state.totalBits}</strong>\n                <table class=\"ui celled table\">\n                <thead>\n                    <tr><th>Character</th>\n                    <th>Frequency</th>\n                    <th>Bit-code</th>\n                </tr></thead>\n                <tbody>\n                    {this.props.chart.map(row => {\n                        return (\n                            <tr>\n                                <td>{row.char}</td>\n                                <td>{row.freq}</td>\n                                <td>{row.code}</td>\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </table>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {chart: [ ...state.data.huffman.chart ]};\n}\n\nexport default connect(mapStateToProps)(HuffmanChartHandler);","import unfindTreeData from \"../treeFunctions/unfindTreeData\";\n\nconst DIAM = 25;\nconst CHARS_TEXT = 14;\nconst FREQ_TEXT = 12;\nconst BIT_TEXT = 10;\n\nexport default function drawCircles(p, tree, type, treeInfo) {\n    const stack = [tree];\n    while (stack.length > 0) {\n        const stackObj = stack[stack.length - 1];\n        if (stackObj.children.length === 0) {\n            stackObj.visited = true;\n            drawOneCircle(p, stackObj, type, treeInfo);\n            stack.pop();\n        }\n        else {\n            if (!stackObj.visited) {\n                stackObj.visited = true;\n                stackObj.children.forEach(childObj => {\n                    drawLine(p, stackObj, childObj, type, treeInfo);\n                    if (!childObj.visited) {\n                        stack.push(childObj);\n                    }\n                });\n            }\n            else {\n                drawOneCircle(p, stackObj, type, treeInfo);\n                stack.pop();\n            }\n        }\n    }\n    unfindTreeData(tree);\n}\n\nfunction drawOneCircle(p, stackObj, type, treeInfo) {\n    const colorValue =  Math.floor(255 * (treeInfo.maxFrequency - stackObj.freq) / treeInfo.maxFrequency);\n    const color = type === \"encodingTree\" ? `rgb(255,${colorValue}, ${colorValue})` : `rgb(${colorValue},${colorValue},255)`;\n    const xCoord = (stackObj.coords.x + 0.5) * p.width / treeInfo.totalLeaves;\n    const yCoord = (stackObj.coords.y + 0.5) * p.height / treeInfo.maxDepth;\n    p.fill(color);\n    p.stroke(0);\n    p.strokeWeight(1);\n    p.circle(xCoord, yCoord, DIAM * (stackObj.selected ? 1.3 : 1));\n    p.fill(0);\n    p.noStroke();\n    if (stackObj.chars) {\n        p.textSize(stackObj.chars.length > 1 ? CHARS_TEXT / 1.3 : CHARS_TEXT);\n        p.textAlign(stackObj.chars.length > 1 ? p.LEFT : p.CENTER);\n        p.text(\n            stackObj.chars.replace(\" \", \"-\"), \n            xCoord + (stackObj.chars.length > 1 ? DIAM / 2 + CHARS_TEXT / 5 : 0), \n            yCoord + CHARS_TEXT / (stackObj.chars.length > 1 ? 4 : 3)\n        );\n    }\n    p.textAlign(p.CENTER);\n    p.textSize(FREQ_TEXT);\n    p.text(stackObj.freq, xCoord, yCoord + DIAM);\n\n}\n\nfunction drawLine(p, stackObj, childObj, type, treeInfo) {\n    p.stroke(0);\n    p.strokeWeight(2);\n    const x1 = (stackObj.coords.x + 0.5) * p.width / treeInfo.totalLeaves;\n    const y1 = (stackObj.coords.y + 0.5) * p.height / treeInfo.maxDepth;\n    const x2 = (childObj.coords.x + 0.5) * p.width / treeInfo.totalLeaves;\n    const y2 = (childObj.coords.y + 0.5) * p.height / treeInfo.maxDepth;\n    p.line(x1, y1, x2, y2);\n    if (type === \"encodingTree\") {\n        const textX = (x1 + x2) / 2;\n        const textY = (y1 + y2) / 2;\n        p.fill(255);\n        p.noStroke();\n        p.circle(textX, textY, BIT_TEXT * 2);\n        p.textSize(BIT_TEXT);\n        p.fill(0);\n        p.text(childObj.localWidthIndex, textX, textY + BIT_TEXT / 3);\n    }\n}","import unfindTreeData from \"../treeFunctions/unfindTreeData\";\nimport drawCircles from \"../sketchFunctions/drawCirclesHuffman\";\n\n\nexport default function drawTree(p, tree, type) {\n    if (Object.keys(tree).length === 0) {\n        return;\n    }\n    unfindTreeData(tree);\n    const treeInfo = assignCoordinatesAndFrequencies(tree);\n    drawCircles(p, tree, type, treeInfo);\n}\n\nfunction assignCoordinatesAndFrequencies(tree) {\n    if (!tree.freq && tree.children.length === 0) {\n        return { totalLeaves: 0, maxDepth: 0, maxFrequency: 0 };\n    }\n    let totalLeaves = 0;\n    let maxDepth = 1;\n    let maxFrequency = 0;\n    const stack = [tree];\n    while (stack.length > 0) {\n        const stackObj = stack[stack.length - 1];\n        if (stackObj.children.length === 0) {\n            if (stack.length > maxDepth) {\n                maxDepth = stack.length;\n            }\n            if (stackObj.freq > maxFrequency) {\n                maxFrequency = stackObj.freq;\n            }\n            stackObj.coords = {x: totalLeaves, y: stack.length - 1}\n            stackObj.visited = true;\n            totalLeaves++;\n            stack.pop();\n        }\n        else {\n            if (!stackObj.children[0].visited) {\n                stack.push(stackObj.children[0]);\n            }\n            else if (stackObj.children.length > 1 && !stackObj.children[1].visited) {\n                stack.push(stackObj.children[1]);\n            }\n            else {\n                stackObj.visited = true;\n                const x1 = stackObj.children[0].coords.x;\n                const x2 = stackObj.children.length > 1 ? stackObj.children[1].coords.x : x1;\n                stackObj.coords = {x: (x1 + x2) / 2, y: stack.length - 1}\n                const freq1 = stackObj.children[0].freq;\n                const freq2 = stackObj.children.length > 1 ? stackObj.children[1].freq : 0;\n                stackObj.freq = stackObj.freq ? stackObj.freq : freq1 + freq2;\n                if (stackObj.freq > maxFrequency) {\n                    maxFrequency = stackObj.freq;\n                }\n                stack.pop();\n            }\n        }\n    }\n    unfindTreeData(tree);\n    return { totalLeaves, maxDepth, maxFrequency}\n}\n","import drawTree from \"../utils/sketchFunctions/drawTree\";\n\nexport default function huffmanEncodingTreeSketch(p){\n    let draw = false;\n    let canvasWidth = 650;\n    let canvasHeight = 350;\n    let encodingTree = {}\n\n    p.myCustomRedrawAccordingToNewPropsHandler = (newProps) => {\n          encodingTree = newProps.encodingTree;\n          draw = true;\n      }\n\n    p.setup = () => {\n        p.createCanvas(canvasWidth, canvasHeight);\n        p.noStroke();\n    }\n\n    p.draw = () => {\n        if (draw) {\n            p.background(\"white\");\n            drawTree(p, encodingTree, \"encodingTree\");\n            draw = false;\n        }\n    }\n}","import React from \"react\";\nimport P5Wrapper from 'react-p5-wrapper';\nimport { connect } from \"react-redux\";\nimport huffmanEncodingTreeSketch from '../sketches/huffmanEncodingTreeSketch';\n\nclass HuffmanEncodingTreeHandler extends React.Component {\n    render() {\n        return (\n            <P5Wrapper \n                sketch={huffmanEncodingTreeSketch} \n                encodingTree={this.props.encodingTree}\n            />\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        encodingTree: { ...state.data.huffman.encodingTree },\n    }\n}\n\nexport default connect(mapStateToProps)(HuffmanEncodingTreeHandler);","import drawTree from \"../utils/sketchFunctions/drawTree\";\n\nexport default function huffmanHeapSketch(p){\n    let draw = false;\n    let canvasWidth = 650;\n    let canvasHeight = 250;\n    let heap = {}\n\n    p.myCustomRedrawAccordingToNewPropsHandler = (newProps) => {\n          heap = newProps.heap;\n          draw = true;\n      }\n\n    \n    p.setup = () => {\n        p.createCanvas(canvasWidth, canvasHeight);\n        p.noStroke();\n    }\n\n\n\n    p.draw = () => {\n        if (draw) {\n            p.background(\"white\");\n            drawTree(p, heap, \"heap\");\n            draw = false;\n        }\n    }\n}","import React from \"react\";\nimport P5Wrapper from 'react-p5-wrapper';\nimport { connect } from \"react-redux\";\nimport huffmanHeapSketch from '../sketches/huffmanHeapSketch';\n\nclass HuffmanHeapHandler extends React.Component {\n    \n    render() {\n        return (\n            <P5Wrapper \n                sketch={huffmanHeapSketch} \n                heap={this.props.heap}\n            />\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        heap: { ...state.data.huffman.heapTree },\n    }\n}\n\nexport default connect(mapStateToProps)(HuffmanHeapHandler);","import React from \"react\";\nimport { callReset, changeSelectedAlgorithmType } from \"../utils/changeStore/changeBasicInfo\";\n\nimport Header from \"./Header\";\nimport UserInput from \"./UserInput\";\nimport HuffmanChartHandler from \"./HuffmanChartHandler\";\nimport HuffmanEncodingTreeHandler from \"./HuffmanEncodingTreeHandler\";\nimport HuffmanHeapHandler from \"./HuffmanHeapHandler\";\n\nimport \"./Huffman.css\";\n\nclass Huffman extends React.Component {\n    componentDidMount() {\n        //resets the redux store when page is accessed\n        callReset();\n        changeSelectedAlgorithmType(\"huffman\");\n    }\n    render() {\n        return (\n            <div>\n                <Header />\n                <div className=\"huffman-content\">\n                    <div className=\"huffman-chart\">\n                        <UserInput />\n                        <HuffmanChartHandler />\n                    </div>\n                    <div className=\"huffman-sketches\">\n                        <HuffmanEncodingTreeHandler />\n                        <HuffmanHeapHandler />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Huffman;","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Header from \"./Header\";\nimport \"./About.css\";\n\nclass About extends React.Component {\n\n    //renderText displays the explanation text for each algorithm depending on which page the About page has been accessed from \n    renderText() {\n        switch (this.props.selectedAlgorithmType) {\n            case \"kruskal\":\n                return (\n                    <div>\n                        <h2>Kruskal's algorithm</h2>\n                        <p>\n                        Kruskal’s algorithm computes the minimum spanning tree (or, rather, a minimum spanning tree) for a weighted undirected graph.  In simpler terms, a weighted undirected graph is a set of points or vertices connected by a set of edges, each with an associated cost.  On the graph below, the vertices are displayed as circles and indexed numerically.  The edges are sized both according to the distance between the points they connect (the greater the distance, the thinner the edge) as well to their cost (the lower the cost, the wider the edge, so that a wider edge indicates greater connectivity between two vertices).  A minimum spanning tree is a subset of the set of edges that connect all vertices with a minimized total cost.\n                        </p>\n                        <p>\n                        Kruskal’s algorithm begins by taking all of the edges on the graph and sorting them by cost.  Then, beginning with the lowest cost edge and proceeding one by one, it attempts to add each edge back to the graph but only does so if there are no cycles.  In order to check for cycles, the algorithm either runs a depth-first-search on the vertices connected by the edge being tested or else it employs a more efficient Union-Find data structure in which the vertices keep track of which other vertices they are already connected to (represented in the below display by colors).\n                        </p>\n                    </div>\n                );\n            case \"kosaraju\":\n                return (\n                    <div>\n                        <h2>Kosaraju's algorithm</h2>\n                        <p>\n                        The Kosaraju-Shahrir algorithm computes the Strongly Connected Components (SCC’s) of a directed, unweighted graph.  More simply put, a directed unweighted graph is a set of points or vertices connected by a set of edges that point from one vertex to another (i.e. are directionally one-way).  A Strongly Connected Component is a set of vertices that can all be reached from any other vertex by following a set of successive edges in the correct direction.\n                        </p>\n                        <p>\n                        The algorithm begins by reversing the graph (that is, reversing the direction of every edge).  It then picks an arbitrary point on the graph and runs a depth-first search.  When a vertex is determined to have no in-neighbors (neighboring vertices pointed to by outgoing edges) that have not already been found by the depth-first search, it is added to an ordered list of vertices.  When the depth-first search finishes, the algorithm picks another unfound vertex and runs another depth-first search and continues this way until all vertices on the graph have been found and the ordered list of vertices contains every vertex.\n                        </p>\n                        <p>\n                        Next, the algorithm unreversed the graph back to its original state and runs a new depth-first search on the last vertex to be added to the ordered list of vertices.  The depth-first search will yield an SCC.  The algorithm then finds the last unfound vertex on the ordered list and runs a depth-first search on it to find another SCC, and proceeds in this way until every vertex has been found.\n                        </p>\n                        <p>\n                        Note that in the display below, the SCC’s are color-coded.  In order to ensure that the overall set of colors are of maximal distance from each other on the rgb cube, the program has to solve the number of SCC’s before the display is run!\n                        </p>\n                    </div>\n                );\n            default: \n                return (\n                    <div>\n                         <h2>Huffman's algorithm</h2>\n                         <p>\n                         Huffman’s algorithm assigns an encoding key to a string of text in order to compress it into a string of bits of minimal length.  When a string of text is entered into the input field below, the first tree in the display shows the arbitrary and more or less equal length assignments for each character: the set of 0’s and 1’s that label the lines connecting the top of the tree with each individual character represents bits assigned to that character in the encoding key.\n                         </p>\n                        <p>\n                        Huffman’a algorithm replaces the two least frequently occurring characters and replaces them on the tree with a branch representing their combined frequencies in the input string.  It then examines the set of remaining characters along with this branch to find the two least frequently occurring, and replaces them with another combined branch, proceeding this way until the result is one large branch that constitutes the new tree.\n                        </p>\n                        <p>\n                        In order to continually find the two minimum values efficiently, the algorithm keeps track of the data in a heap structure, visualized in the second part of the display.  Minimums can be extracted from the heap and new values can be inserted in, both in logarithmic time.\n                        </p>\n                    </div>\n                );\n        }\n    }\n\n    render() {\n        return (\n            <div class=\"about-global-wrapper\">\n                <Header />\n                <div className=\"about-outer-wrapper\">\n                    <div className=\"about-inner-wrapper\" >\n                        <div className=\"about-content\">\n                           {this.renderText()}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {selectedAlgorithmType: state.selectedAlgorithm.type};\n}\n\nexport default connect(mapStateToProps)(About);","import React from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\";\n\nimport Home from \"./Home\";\nimport Kruskal from \"./Kruskal\";\nimport Kosaraju from \"./Kosaraju\";\nimport Huffman from \"./Huffman\";\nimport About from \"./About\";\n\nconst App = () => {\n\n    console.log(\"changes pushed to deployment\")\n\n    return (\n        <HashRouter>\n            <Route path=\"/\" exact component={Home} />\n            <Route path=\"/kruskal\" exact component={Kruskal} />\n            <Route path=\"/kosaraju\" exact component={Kosaraju} />\n            <Route path=\"/huffman\" exact component={Huffman} />\n            <Route path=\"/about\" exact component={About} />\n        </HashRouter>\n    );\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport reducers from \"./reducers\";\nimport App from \"./components/App\";\n\nexport const store = createStore(reducers);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, \n    document.querySelector(\"#root\")\n);"],"sourceRoot":""}